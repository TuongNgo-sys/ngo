# web_esp.py
import streamlit as st
from datetime import datetime, timedelta, date, time
import random
from PIL import Image
import requests
import json
import os
from streamlit_autorefresh import st_autorefresh
import pytz
import pandas as pd
import threading
import paho.mqtt.client as mqtt
import matplotlib.pyplot as plt

# -----------------------
# Config & helpers
# -----------------------
st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
st_autorefresh(interval=60 * 1000, key="init_refresh")

# --- I18N ---
lang = st.sidebar.selectbox("üåê Language / Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
vi = lang == "Ti·∫øng Vi·ªát"
def _(vi_text, en_text):
    return vi_text if vi else en_text

# Files
DATA_FILE = "crop_data.json"
HISTORY_FILE = "history_irrigation.json"
FLOW_FILE = "flow_data.json"  # l∆∞u d·ªØ li·ªáu l∆∞u l∆∞·ª£ng (esp32) theo th·ªùi gian
CONFIG_FILE = "config.json"   # l∆∞u c·∫•u h√¨nh chung: khung gi·ªù t∆∞·ªõi + ch·∫ø ƒë·ªô
SOIL_HUMIDITY_HISTORY_FILE = "soil_moisture_history.json"
WATER_FLOW_HISTORY_FILE = "water_flow_history.json"

def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    else:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# H√†m th√™m record c·∫£m bi·∫øn v√†o history
def add_history_record(sensor_hum, sensor_temp):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "timestamp": now_iso,
        "sensor_hum": sensor_hum,
        "sensor_temp": sensor_temp
    }
    history = load_json(HISTORY_FILE, [])
    history.append(new_record)
    save_json(HISTORY_FILE, history)

# H√†m th√™m record l∆∞u l∆∞·ª£ng v√†o flow_data
def add_flow_record(flow_val):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "time": now_iso,
        "flow": flow_val
    }
    flow = load_json(FLOW_FILE, [])
    flow.append(new_record)
    save_json(FLOW_FILE, flow)

# Load persistent data
crop_data = load_json(DATA_FILE, {})
history_data = load_json(HISTORY_FILE, [])
flow_data = load_json(FLOW_FILE, [])
config = load_json(CONFIG_FILE, {"watering_schedule": "06:00-08:00", "mode": "auto"})

# timezone
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
now = datetime.now(vn_tz)

# -----------------------
# UI - Header & Logo
# -----------------------
try:
    st.markdown("""
    <style>
    .block-container { padding-top: 1rem; }
    h3 { color: #000000 !important; font-size: 20px !important; font-family: Arial, sans-serif !important; font-weight: bold !important; }
    .led { display:inline-block; width:14px; height:14px; border-radius:50%; margin-right:6px; }
    </style>
    """, unsafe_allow_html=True)
    st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå Kh√¥ng t√¨m th·∫•y logo.png", "‚ùå logo.png not found"))

st.markdown(f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh', 'Smart Agricultural Irrigation System') } üåæ</h2>", unsafe_allow_html=True)
st.markdown(f"<h3>‚è∞ { _('Th·ªùi gian hi·ªán t·∫°i', 'Current time') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# -----------------------
# Sidebar - role, auth
# -----------------------
st.sidebar.title(_("üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng", "üîê Select User Role"))
user_type = st.sidebar.radio(_("B·∫°n l√†:", "You are:"), [_("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"), _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer")])

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    password = st.sidebar.text_input(_("üîë Nh·∫≠p m·∫≠t kh·∫©u:", "üîë Enter password:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", "‚ùå Incorrect password. Access denied."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ X√°c th·ª±c th√†nh c√¥ng.", "‚úÖ Authentication successful."))

# -----------------------
# Locations & crops (unchanged)
# -----------------------
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("TP. H·ªì Ch√≠ Minh", "Ho Chi Minh City"),
    "H√† N·ªôi": _("H√† N·ªôi", "Hanoi"),
    "C·∫ßn Th∆°": _("C·∫ßn Th∆°", "Can Tho"),
    "ƒê√† N·∫µng": _("ƒê√† N·∫µng", "Da Nang"),
    "B√¨nh D∆∞∆°ng": _("B√¨nh D∆∞∆°ng", "Binh Duong"),
    "ƒê·ªìng Nai": _("ƒê·ªìng Nai", "Dong Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
selected_city_display = st.selectbox(_("üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:", "üìç Select location:"), location_display_names)
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

crops = {
    "Ng√¥": (75, 100),
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90),
}
required_soil_moisture = {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
crop_names = {"Ng√¥": _("Ng√¥", "Corn"), "Chu·ªëi": _("Chu·ªëi", "Banana"), "·ªöt": _("·ªöt", "Chili pepper")}

# -----------------------
# Crop management (unchanged)
# -----------------------
st.header(_("üå± Qu·∫£n l√Ω c√¢y tr·ªìng", "üå± Crop Management"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("Th√™m / C·∫≠p nh·∫≠t v√πng tr·ªìng", "Add / Update Plantings"))
    multiple = st.checkbox(_("Tr·ªìng nhi·ªÅu lo·∫°i tr√™n khu v·ª±c n√†y", "Plant multiple crops in this location"), value=False)
    if selected_city not in crop_data:
        crop_data[selected_city] = {"plots": [], "mode": config.get("mode", "auto")}
    if multiple:
        st.markdown(_("Th√™m t·ª´ng lo·∫°i c√¢y v√†o khu v·ª±c (b·∫•m 'Th√™m c√¢y')", "Add each crop to the area (click 'Add crop')"))
        col1, col2 = st.columns([2, 1])
        with col1:
            add_crop = st.selectbox(_("Ch·ªçn lo·∫°i c√¢y ƒë·ªÉ th√™m", "Select crop to add"), [crop_names[k] for k in crops.keys()])
            add_crop_key = next(k for k, v in crop_names.items() if v == add_crop)
            add_planting_date = st.date_input(_("Ng√†y gieo tr·ªìng", "Planting date for this crop"), value=date.today())
        with col2:
            if st.button(_("‚ûï Th√™m c√¢y", "‚ûï Add crop")):
                crop_entry = {"crop": add_crop_key, "planting_date": add_planting_date.isoformat()}
                crop_data[selected_city]["plots"].append(crop_entry)
                save_json(DATA_FILE, crop_data)
                st.success(_("ƒê√£ th√™m c√¢y v√†o khu v·ª±c.", "Crop added to location."))
    else:
        crop_display_names = [crop_names[k] for k in crops.keys()]
        selected_crop_display = st.selectbox(_("üå± Ch·ªçn lo·∫°i n√¥ng s·∫£n:", "üå± Select crop type:"), crop_display_names)
        selected_crop = next(k for k, v in crop_names.items() if v == selected_crop_display)
        planting_date = st.date_input(_("üìÖ Ng√†y gieo tr·ªìng:", "üìÖ Planting date:"), value=date.today())
        if st.button(_("üíæ L∆∞u th√¥ng tin tr·ªìng", "üíæ Save planting info")):
            crop_data[selected_city] = {"plots": [{"crop": selected_crop, "planting_date": planting_date.isoformat()}], "mode": config.get("mode", "auto")}
            save_json(DATA_FILE, crop_data)
            st.success(_("ƒê√£ l∆∞u th√¥ng tin tr·ªìng.", "Planting info saved."))

if user_type == _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer"):
    st.subheader(_("Th√¥ng tin c√¢y tr·ªìng t·∫°i khu v·ª±c", "Plantings at this location"))
    if selected_city in crop_data and crop_data[selected_city].get("plots"):
        plots = crop_data[selected_city]["plots"]
        rows = []
        for p in plots:
            crop_k = p["crop"]
            pd_iso = p["planting_date"]
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            min_d, max_d = crops[crop_k]
            harvest_min = pd_date + timedelta(days=min_d)
            harvest_max = pd_date + timedelta(days=max_d)
            days_planted = (date.today() - pd_date).days
            def giai_doan_cay(crop, days):
                if crop == "Chu·ªëi":
                    if days <= 14: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 180: return _("üåø Ph√°t tri·ªÉn", "üåø Growing")
                    elif days <= 330: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üçå ƒê√£ thu ho·∫°ch", "üçå Harvested")
                elif crop == "Ng√¥":
                    if days <= 25: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 70: return _("üåø Th·ª• ph·∫•n", "üåø Pollination")
                    elif days <= 100: return _("üåº Tr√°i ph√°t tri·ªÉn", "üåº Kernel growth")
                    else: return _("üåΩ ƒê√£ thu ho·∫°ch", "üåΩ Harvested")
                elif crop == "·ªöt":
                    if days <= 20: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 500: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üå∂Ô∏è ƒê√£ thu ho·∫°ch", "üå∂Ô∏è Harvested")
            rows.append({
                "crop": crop_names[crop_k],
                "planting_date": pd_date.strftime("%d/%m/%Y"),
                "expected_harvest_from": harvest_min.strftime("%d/%m/%Y"),
                "expected_harvest_to": harvest_max.strftime("%d/%m/%Y"),
                "days_planted": days_planted,
                "stage": giai_doan_cay(crop_k, days_planted)
            })
        df_plots = pd.DataFrame(rows)
        st.dataframe(df_plots)
    else:
        st.info(_("üìç Ch∆∞a c√≥ th√¥ng tin gieo tr·ªìng t·∫°i khu v·ª±c n√†y.", "üìç No crop information available in this location."))

# -----------------------
# Mode and Watering Schedule (shared config.json)
# -----------------------
st.header(_("‚öôÔ∏è C·∫•u h√¨nh chung h·ªá th·ªëng", "‚öôÔ∏è System General Configuration"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(_("### ‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc", "### ‚è≤Ô∏è Watering time window"))
        start_time = st.time_input(
            _("Gi·ªù b·∫Øt ƒë·∫ßu", "Start time"),
            value=datetime.strptime(config["watering_schedule"].split("-")[0], "%H:%M").time(),
        )
        end_time = st.time_input(
            _("Gi·ªù k·∫øt th√∫c", "End time"),
            value=datetime.strptime(config["watering_schedule"].split("-")[1], "%H:%M").time(),
        )
    with col2:
        st.markdown(_("### üîÑ Ch·ªçn ch·∫ø ƒë·ªô", "### üîÑ Select operation mode"))
        main_mode = st.radio(
            _("Ch·ªçn ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn", "Select control mode"),
            [_("T·ª± ƒë·ªông", "Automatic"), _("Th·ªß c√¥ng", "Manual")],
            index=0 if config.get("mode", "auto") == "auto" else 1,
        )

        manual_control_type = None
        if main_mode == _("Th·ªß c√¥ng", "Manual"):
            manual_control_type = st.radio(
                _("Ch·ªçn ph∆∞∆°ng th·ª©c th·ªß c√¥ng", "Select manual control type"),
                [_("Th·ªß c√¥ng tr√™n app", "Manual on app"), _("Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "Manual on cabinet")],
            )

    if st.button(_("üíæ L∆∞u c·∫•u h√¨nh", "üíæ Save configuration")):
        config["watering_schedule"] = f"{start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}"
        if main_mode == _("T·ª± ƒë·ªông", "Automatic"):
            config["mode"] = "auto"
            config.pop("manual_control_type", None)
        else:
            config["mode"] = "manual"
            config["manual_control_type"] = manual_control_type
        save_json(CONFIG_FILE, config)
        st.success(_("ƒê√£ l∆∞u c·∫•u h√¨nh.", "Configuration saved."))

else:
    st.markdown(
        _("‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc hi·ªán t·∫°i:", "‚è≤Ô∏è Current watering time window:") + f" **{config['watering_schedule']}**"
    )
    mode_display = _("T·ª± ƒë·ªông", "Automatic") if config.get("mode", "auto") == "auto" else _("Th·ªß c√¥ng", "Manual")
    st.markdown(_("üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông hi·ªán t·∫°i:", "üîÑ Current operation mode:") + f" **{mode_display}**")
    if config.get("mode") == "manual":
        manual_type_display = config.get("manual_control_type", "")
        if manual_type_display == _("Th·ªß c√¥ng tr√™n app", "Manual on app") or manual_type_display == "Manual on app":
            st.markdown(_("‚öôÔ∏è Ph∆∞∆°ng th·ª©c th·ªß c√¥ng: Th·ªß c√¥ng tr√™n app", "‚öôÔ∏è Manual method: Manual on app"))
        elif manual_type_display == _("Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "Manual on cabinet") or manual_type_display == "Manual on cabinet":
            st.markdown(_("‚öôÔ∏è Ph∆∞∆°ng th·ª©c th·ªß c√¥ng: Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "‚öôÔ∏è Manual method: Manual on cabinet"))

# -----------------------
# Weather API (unchanged)
# -----------------------
st.subheader(_("üå¶Ô∏è Th·ªùi ti·∫øt hi·ªán t·∫°i", "üå¶Ô∏è Current Weather"))
weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,relative_humidity_2m,precipitation,precipitation_probability&timezone=auto"
try:
    response = requests.get(weather_url, timeout=10)
    response.raise_for_status()
    weather_data = response.json()
    current_weather = weather_data.get("current", {})
except Exception as e:
    st.error(f"‚ùå {_('L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt', 'Error loading weather data')}: {str(e)}")
    current_weather = {"temperature_2m": "N/A", "relative_humidity_2m": "N/A", "precipitation": "N/A", "precipitation_probability": "N/A"}

col1, col2, col3 = st.columns(3)
col1.metric("üå°Ô∏è " + _("Nhi·ªát ƒë·ªô", "Temperature"), f"{current_weather.get('temperature_2m', 'N/A')} ¬∞C")
col2.metric("üíß " + _("ƒê·ªô ·∫©m", "Humidity"), f"{current_weather.get('relative_humidity_2m', 'N/A')} %")
col3.metric("‚òî " + _("Kh·∫£ nƒÉng m∆∞a", "Precipitation Prob."), f"{current_weather.get('precipitation_probability', 'N/A')} %")

# -----------------------
# Sensor Data from ESP32-WROOM via MQTT
# -----------------------
st.subheader(_("üì° D·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ ESP32", "üì° Sensor Data from ESP32"))

# Global variables to hold latest sensor data
mqtt_data = {"soil_moisture": None, "light": None, "water_flow": None}

soil_moisture_history = load_json(SOIL_HUMIDITY_HISTORY_FILE, [])
water_flow_history = load_json(WATER_FLOW_HISTORY_FILE, [])

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("MQTT connected successfully")
        client.subscribe("smart_irrigation/sensor_data")
    else:
        print(f"MQTT failed to connect, return code {rc}")

def on_message(client, userdata, msg):
    global mqtt_data, soil_moisture_history, water_flow_history
    try:
        payload_str = msg.payload.decode()
        data = json.loads(payload_str)
        soil_moisture = data.get("soil_moisture")
        light = data.get("light")
        water_flow = data.get("water_flow")

        mqtt_data["soil_moisture"] = soil_moisture
        mqtt_data["light"] = light
        mqtt_data["water_flow"] = water_flow

        now_iso = datetime.now(vn_tz).isoformat()

        # Update soil moisture history
        if soil_moisture is not None:
            soil_moisture_history.append({"timestamp": now_iso, "value": soil_moisture})
            if len(soil_moisture_history) > 100:
                soil_moisture_history.pop(0)
            save_json(SOIL_HUMIDITY_HISTORY_FILE, soil_moisture_history)

        # Update water flow history
        if water_flow is not None:
            water_flow_history.append({"timestamp": now_iso, "value": water_flow})
            if len(water_flow_history) > 100:
                water_flow_history.pop(0)
            save_json(WATER_FLOW_HISTORY_FILE, water_flow_history)

    except Exception as e:
        print(f"Error processing MQTT message: {e}")

def mqtt_loop():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect("broker.hivemq.com", 1883, 60)
    client.loop_forever()

# Start MQTT client in background thread
if "mqtt_thread_started" not in st.session_state:
    mqtt_thread = threading.Thread(target=mqtt_loop, daemon=True)
    mqtt_thread.start()
    st.session_state.mqtt_thread_started = True

# Display latest sensor data
col1, col2, col3 = st.columns(3)
col1.metric(_("ƒê·ªô ·∫©m ƒë·∫•t", "Soil Moisture"), f"{mqtt_data['soil_moisture'] if mqtt_data['soil_moisture'] is not None else 'N/A'} %")
col2.metric(_("C∆∞·ªùng ƒë·ªô √°nh s√°ng", "Light Intensity"), f"{mqtt_data['light'] if mqtt_data['light'] is not None else 'N/A'} lx")
col3.metric(_("L∆∞u l∆∞·ª£ng n∆∞·ªõc", "Water Flow"), f"{mqtt_data['water_flow'] if mqtt_data['water_flow'] is not None else 'N/A'} L/min")

# -----------------------
# Bi·ªÉu ƒë·ªì d·ªØ li·ªáu c·∫£m bi·∫øn
# -----------------------
def to_df(history):
    df = pd.DataFrame(history)
    if not df.empty:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        df.set_index("timestamp", inplace=True)
    return df

df_soil = to_df(soil_moisture_history)
df_flow = to_df(water_flow_history)

st.subheader(_("üìà Bi·ªÉu ƒë·ªì d·ªØ li·ªáu c·∫£m bi·∫øn", "üìà Sensor Data Charts"))

if not df_soil.empty:
    st.markdown(_("### ƒê·ªô ·∫©m ƒë·∫•t theo th·ªùi gian", "### Soil Moisture Over Time"))
    st.line_chart(df_soil["value"])
else:
    st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.", "No soil moisture data to display chart."))

if not df_flow.empty:
    st.markdown(_("### L∆∞u l∆∞·ª£ng n∆∞·ªõc theo th·ªùi gian", "### Water Flow Over Time"))
    st.line_chart(df_flow["value"])
else:
    st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞u l∆∞·ª£ng n∆∞·ªõc ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.", "No water flow data to display chart."))

# -----------------------
# (C√≥ th·ªÉ th√™m ph·∫ßn ƒëi·ªÅu khi·ªÉn t∆∞·ªõi, l·ªãch s·ª≠ t∆∞·ªõi, v.v. n·∫øu b·∫°n mu·ªën)
# -----------------------

# L∆∞u √Ω: Ph·∫ßn t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông, x√°c nh·∫≠n b·∫≠t b∆°m,... ch∆∞a ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y,
# b·∫°n c√≥ th·ªÉ th√™m sau n·∫øu c·∫ßn.

