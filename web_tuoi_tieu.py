# web_esp.py
import streamlit as st
from datetime import datetime, timedelta, date, time
import json
import os
import pytz
import pandas as pd
import threading
import random
from PIL import Image
import requests
import paho.mqtt.client as mqtt
import matplotlib.pyplot as plt  # <-- added for plotting
#import seaborn as sns
#from streamlit_autorefresh import st_autorefresh
# -----------------------
# Config & helpers
# -----------------------
st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
#st_autorefresh(interval=60 * 1000, key="init_refresh")

# --- I18N ---
lang = st.sidebar.selectbox("üåê Language / Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
vi = lang == "Ti·∫øng Vi·ªát"
def _(vi_text, en_text):
    return vi_text if vi else en_text

# Files
DATA_FILE = "crop_data.json"
HISTORY_FILE = "history_irrigation.json"
FLOW_FILE = "flow_data.json"  # l∆∞u d·ªØ li·ªáu l∆∞u l∆∞·ª£ng (esp32) theo th·ªùi gian
CONFIG_FILE = "config.json"   # l∆∞u c·∫•u h√¨nh chung: khung gi·ªù t∆∞·ªõi + ch·∫ø ƒë·ªô

def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    else:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# -----------------------
# Helper: gi·ªØ d·ªØ li·ªáu trong v√≤ng N ng√†y (m·∫∑c ƒë·ªãnh 365)
# -----------------------
def filter_recent_list(lst, time_key, days=365):
    """
    lst: list of dicts
    time_key: key string containing ISO timestamp (e.g. 'timestamp' or 'time')
    returns filtered list containing only records within last `days` days
    """
    try:
        cutoff = datetime.now(vn_tz) - timedelta(days=days)
    except Exception:
        cutoff = datetime.utcnow() - timedelta(days=days)
    out = []
    for item in lst:
        ts = item.get(time_key)
        if not ts:
            continue
        try:
            dt = datetime.fromisoformat(ts)
        except:
            try:
                dt = datetime.strptime(ts, "%Y-%m-%dT%H:%M:%S")
            except:
                continue
        # ensure timezone-aware comparison
        if dt.tzinfo is None:
            dt = vn_tz.localize(dt)
        if dt >= cutoff:
            out.append(item)
    return out

# Timezone
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")

# H√†m th√™m record l∆∞u l∆∞·ª£ng v√†o flow_data
def add_flow_record(flow_val, location=""):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "time": now_iso,
        "flow": flow_val,
        "location": location,
    }
    flow = load_json(FLOW_FILE, [])
    flow.append(new_record)
    # l∆∞u lu√¥n sau khi th√™m
    save_json(FLOW_FILE, flow)

# H√†m th√™m record c·∫£m bi·∫øn v√†o history
def add_history_record(sensor_hum, sensor_temp, location=""):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "timestamp": now_iso,
        "sensor_hum": sensor_hum,
        "sensor_temp": sensor_temp,
        "location": location,
    }
    history = load_json(HISTORY_FILE, [])
    history.append(new_record)
    save_json(HISTORY_FILE, history)

# H√†m chuy·ªÉn list dict l·ªãch s·ª≠ th√†nh DataFrame v√† s·∫Øp x·∫øp theo th·ªùi gian
def to_df(lst):
    if not lst:
        return pd.DataFrame()
    df = pd.DataFrame(lst)
    time_col = "timestamp" if "timestamp" in df.columns else ("time" if "time" in df.columns else None)
    if time_col:
        df[time_col] = pd.to_datetime(df[time_col], errors='coerce')
        df = df.dropna(subset=[time_col])
        df = df.sort_values(by=time_col)
        df = df.reset_index(drop=True)
    return df

# -----------------------
# Load persistent data (v√† l·ªçc l·ªãch s·ª≠ ch·ªâ 1 nƒÉm g·∫ßn nh·∫•t)
# -----------------------
crop_data = load_json(DATA_FILE, {})
# load full then filter history & flow to recent 365 days
_raw_history = load_json(HISTORY_FILE, [])
_raw_flow = load_json(FLOW_FILE, [])
# filter
history_data = filter_recent_list(_raw_history, "timestamp", days=365)
flow_data = filter_recent_list(_raw_flow, "time", days=365)
# save trimmed back (so file size won't keep growing indefinitely)
save_json(HISTORY_FILE, history_data)
save_json(FLOW_FILE, flow_data)

# config default
config = load_json(CONFIG_FILE, {"watering_schedule": "06:00-08:00", "mode": "auto"})

# -----------------------
# UI - Header & Logo
# -----------------------
try:
    st.markdown("""
    <style>
    .block-container { padding-top: 1rem; }
    h3 { color: #000000 !important; font-size: 20px !important; font-family: Arial, sans-serif !important; font-weight: bold !important; }
    .led { display:inline-block; width:14px; height:14px; border-radius:50%; margin-right:6px; }
    </style>
    """, unsafe_allow_html=True)
    st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå Kh√¥ng t√¨m th·∫•y logo.png", "‚ùå logo.png not found"))

now = datetime.now(vn_tz)
st.markdown(f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh', 'Smart Agricultural Irrigation System') } üåæ</h2>", unsafe_allow_html=True)
st.markdown(f"<h3>‚è∞ { _('Th·ªùi gian hi·ªán t·∫°i', 'Current time') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# -----------------------
# Sidebar - role, auth
# -----------------------
st.sidebar.title(_("üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng", "üîê Select User Role"))
user_type = st.sidebar.radio(_("B·∫°n l√†:", "You are:"), [_("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"), _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer")])

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    password = st.sidebar.text_input(_("üîë Nh·∫≠p m·∫≠t kh·∫©u:", "üîë Enter password:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", "‚ùå Incorrect password. Access denied."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ X√°c th·ª±c th√†nh c√¥ng.", "‚úÖ Authentication successful."))

# -----------------------
# Locations & crops
# -----------------------
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("TP. H·ªì Ch√≠ Minh", "Ho Chi Minh City"),
    "H√† N·ªôi": _("H√† N·ªôi", "Hanoi"),
    "C·∫ßn Th∆°": _("C·∫ßn Th∆°", "Can Tho"),
    "ƒê√† N·∫µng": _("ƒê√† N·∫µng", "Da Nang"),
    "B√¨nh D∆∞∆°ng": _("B√¨nh D∆∞∆°ng", "Binh Duong"),
    "ƒê·ªìng Nai": _("ƒê·ªìng Nai", "Dong Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
selected_city_display = st.selectbox(_("üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:", "üìç Select location:"), location_display_names)
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

crops = {
    "Ng√¥": (75, 100),
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90),
}
required_soil_moisture = {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
crop_names = {"Ng√¥": _("Ng√¥", "Corn"), "Chu·ªëi": _("Chu·ªëi", "Banana"), "·ªöt": _("·ªöt", "Chili pepper")}

# -----------------------
# Crop management
# -----------------------
st.header(_("üå± Qu·∫£n l√Ω c√¢y tr·ªìng", "üå± Crop Management"))
mode_flag = config.get("mode", "auto")

# --- NEW: For controller - choose sub-plot (khu v·ª±c con) and view planting history (1 year)
if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("Th√™m / C·∫≠p nh·∫≠t v√πng tr·ªìng", "Add / Update Plantings"))
    multiple = st.checkbox(_("Tr·ªìng nhi·ªÅu lo·∫°i tr√™n khu v·ª±c n√†y", "Plant multiple crops in this location"), value=False)
    if selected_city not in crop_data:
        crop_data[selected_city] = {"plots": [], "mode": mode_flag}
    if multiple:
        st.markdown(_("Th√™m t·ª´ng lo·∫°i c√¢y v√†o khu v·ª±c (b·∫•m 'Th√™m c√¢y')", "Add each crop to the area (click 'Add crop')"))
        col1, col2 = st.columns([2, 1])
        with col1:
            add_crop = st.selectbox(_("Ch·ªçn lo·∫°i c√¢y ƒë·ªÉ th√™m", "Select crop to add"), [crop_names[k] for k in crops.keys()])
            add_crop_key = next(k for k, v in crop_names.items() if v == add_crop)
            add_planting_date = st.date_input(_("Ng√†y gieo tr·ªìng", "Planting date for this crop"), value=date.today())
        with col2:
            if st.button(_("‚ûï Th√™m c√¢y", "‚ûï Add crop")):
                crop_entry = {"crop": add_crop_key, "planting_date": add_planting_date.isoformat()}
                crop_data[selected_city]["plots"].append(crop_entry)
                save_json(DATA_FILE, crop_data)
                st.success(_("ƒê√£ th√™m c√¢y v√†o khu v·ª±c.", "Crop added to location."))
    else:
        crop_display_names = [crop_names[k] for k in crops.keys()]
        selected_crop_display = st.selectbox(_("üå± Ch·ªçn lo·∫°i n√¥ng s·∫£n:", "üå± Select crop type:"), crop_display_names)
        selected_crop = next(k for k, v in crop_names.items() if v == selected_crop_display)
        planting_date = st.date_input(_("üìÖ Ng√†y gieo tr·ªìng:", "üìÖ Planting date:"), value=date.today())
        if st.button(_("üíæ L∆∞u th√¥ng tin tr·ªìng", "üíæ Save planting info")):
            crop_data[selected_city] = {"plots": [{"crop": selected_crop, "planting_date": planting_date.isoformat()}], "mode": mode_flag}
            save_json(DATA_FILE, crop_data)
            st.success(_("ƒê√£ l∆∞u th√¥ng tin tr·ªìng.", "Planting info saved."))

    # --- NEW: Show planting history (last 1 year) for controller
    st.subheader(_("üìö L·ªãch s·ª≠ c√¢y ƒë√£ tr·ªìng (1 nƒÉm)", "üìö Planting history (1 year)"))
    plots_all = crop_data.get(selected_city, {}).get("plots", [])
    if plots_all:
        rows_hist = []
        cutoff_dt = date.today() - timedelta(days=365)
        for idx, p in enumerate(plots_all):
            crop_k = p.get("crop")
            pd_iso = p.get("planting_date")
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            if pd_date >= cutoff_dt:
                rows_hist.append({
                    "plot_index": idx,
                    "crop": crop_names.get(crop_k, crop_k),
                    "planting_date": pd_date.strftime("%d/%m/%Y")
                })
        if rows_hist:
            df_hist_plants = pd.DataFrame(rows_hist)
            st.dataframe(df_hist_plants)
        else:
            st.info(_("Kh√¥ng c√≥ c√¢y ƒë∆∞·ª£c tr·ªìng trong v√≤ng 1 nƒÉm t·∫°i khu v·ª±c n√†y.", "No plantings within last 1 year in this location."))
    else:
        st.info(_("Ch∆∞a c√≥ v√πng tr·ªìng n√†o trong khu v·ª±c n√†y.", "No plots in this location yet."))

# --- NEW: Controller - choose which plot to control pump for
if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("üö∞ ƒêi·ªÅu khi·ªÉn b∆°m cho t·ª´ng khu v·ª±c con (plot)", "üö∞ Pump control per plot"))
    plots_for_control = crop_data.get(selected_city, {}).get("plots", [])
    if not plots_for_control:
        st.info(_("Ch∆∞a c√≥ khu v·ª±c con (plot) ƒë·ªÉ ƒëi·ªÅu khi·ªÉn. Vui l√≤ng th√™m v√πng tr·ªìng.", "No sub-plots to control. Please add plantings."))
    else:
        # create friendly labels
        plot_labels = []
        for i, p in enumerate(plots_for_control):
            crop_k = p.get("crop")
            pd_iso = p.get("planting_date", "")
            label = f"Plot {i} - {crop_names.get(crop_k, crop_k)} - {pd_iso}"
            plot_labels.append(label)
        selected_plot_label = st.selectbox(_("Ch·ªçn khu v·ª±c con ƒë·ªÉ ƒëi·ªÅu khi·ªÉn:", "Select plot to control:"), plot_labels)
        selected_plot_index = plot_labels.index(selected_plot_label)
        col_a, col_b = st.columns(2)
        with col_a:
            if st.button(_("üîõ B·∫≠t b∆°m cho khu v·ª±c ƒë√£ ch·ªçn", "üîõ Turn ON pump for selected plot")):
                # l∆∞u l·ªãch s·ª≠ t∆∞·ªõi b·∫Øt ƒë·∫ßu cho plot n√†y
                history_irrigation = load_json(HISTORY_FILE, [])
                new_irrigation = {
                    "location": selected_city,
                    "plot_index": selected_plot_index,
                    "crop": plots_for_control[selected_plot_index].get("crop"),
                    "start_time": datetime.now(vn_tz).isoformat(),
                    "end_time": None,
                }
                history_irrigation.append(new_irrigation)
                save_json(HISTORY_FILE, history_irrigation)
                st.success(_("‚úÖ ƒê√£ b·∫≠t b∆°m cho khu v·ª±c.", "‚úÖ Pump turned ON for selected plot."))
        with col_b:
            if st.button(_("‚èπ D·ª´ng b∆°m cho khu v·ª±c ƒë√£ ch·ªçn", "‚èπ Stop pump for selected plot")):
                history_irrigation = load_json(HISTORY_FILE, [])
                # t√¨m b·∫£n ghi m·ªü g·∫ßn nh·∫•t cho location & plot_index
                for i in reversed(range(len(history_irrigation))):
                    rec = history_irrigation[i]
                    if rec.get("location") == selected_city and rec.get("plot_index") == selected_plot_index and rec.get("end_time") is None:
                        history_irrigation[i]["end_time"] = datetime.now(vn_tz).isoformat()
                        save_json(HISTORY_FILE, history_irrigation)
                        st.success(_("üö∞ ƒê√£ d·ª´ng b∆°m cho khu v·ª±c.", "üö∞ Pump stopped for selected plot."))
                        break
                else:
                    st.info(_("Kh√¥ng t√¨m th·∫•y phi√™n t∆∞·ªõi ƒëang m·ªü cho khu v·ª±c n√†y.", "No open irrigation session found for this plot."))

# ======================
# Ph·∫ßn cho Ng∆∞·ªùi gi√°m s√°t
# ======================
if user_type == _("Ng∆∞·ªùi gi√°m s√°t", "Monitoring Officer"):
    st.subheader(_("üìú L·ªãch s·ª≠ t∆∞·ªõi n∆∞·ªõc", "üìú Irrigation History"))
    irrigation_hist = load_json(HISTORY_FILE, [])
    filtered_irrigation = [r for r in irrigation_hist if r.get("location") == selected_city]
    if filtered_irrigation:
        df_irrig = pd.DataFrame(filtered_irrigation)
        if "start_time" in df_irrig.columns:
            df_irrig["start_time"] = pd.to_datetime(
                df_irrig["start_time"], errors='coerce'
            ).dt.strftime("%H:%M")
        # Ch·ªâ gi·ªØ gi·ªù t∆∞·ªõi v√† khu v·ª±c + ƒë·ªïi t√™n c·ªôt song ng·ªØ
        df_irrig = df_irrig[["start_time", "location"]]
        df_irrig.rename(columns={
            "start_time": _("Gi·ªù t∆∞·ªõi", "Start Time"),
            "location": _("Khu v·ª±c", "Location")
        }, inplace=True)

        # CƒÉn gi·ªØa, ·∫©n index v√† th√™m m√†u n·ªÅn xen k·∫Ω
        styled_df = df_irrig.sort_values(
            by=_("Gi·ªù t∆∞·ªõi", "Start Time"), ascending=False
        ).style.set_properties(**{'text-align': 'center'}) \
         .hide(axis='index') \
         .apply(lambda x: ['background-color: #f9f9f9' if i % 2 == 0 else '' for i in range(len(x))], axis=0)

        st.dataframe(styled_df, use_container_width=True)
    else:
        st.info(_("Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞·ªõi cho khu v·ª±c n√†y.", "No irrigation history for this location."))


# ======================
# Ph·∫ßn cho Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn
# ======================
elif user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Controller"):
    # ... c√°c ph·∫ßn ƒëi·ªÅu khi·ªÉn t∆∞·ªõi c·ªßa b·∫°n ·ªü ƒë√¢y ...

    # L·ªãch s·ª≠ t∆∞·ªõi
    st.subheader(_("üìú L·ªãch s·ª≠ t∆∞·ªõi n∆∞·ªõc", "üìú Irrigation History"))
    irrigation_hist = load_json(HISTORY_FILE, [])
    filtered_irrigation = [r for r in irrigation_hist if r.get("location") == selected_city]
    if filtered_irrigation:
        df_irrig = pd.DataFrame(filtered_irrigation)
        if "start_time" in df_irrig.columns:
            df_irrig["start_time"] = pd.to_datetime(
                df_irrig["start_time"], errors='coerce'
            ).dt.strftime("%H:%M")
        # Ch·ªâ gi·ªØ gi·ªù t∆∞·ªõi v√† khu v·ª±c + ƒë·ªïi t√™n c·ªôt song ng·ªØ
        df_irrig = df_irrig[["start_time", "location"]]
        df_irrig.rename(columns={
            "start_time": _("Gi·ªù t∆∞·ªõi", "Start Time"),
            "location": _("Khu v·ª±c", "Location")
        }, inplace=True)

        # CƒÉn gi·ªØa, ·∫©n index v√† th√™m m√†u n·ªÅn xen k·∫Ω
        styled_df = df_irrig.sort_values(
            by=_("Gi·ªù t∆∞·ªõi", "Start Time"), ascending=False
        ).style.set_properties(**{'text-align': 'center'}) \
         .hide(axis='index') \
         .apply(lambda x: ['background-color: #f9f9f9' if i % 2 == 0 else '' for i in range(len(x))], axis=0)

        st.dataframe(styled_df, use_container_width=True)
    else:
        st.info(_("Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞·ªõi cho khu v·ª±c n√†y.", "No irrigation history for this location."))

