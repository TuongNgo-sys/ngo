# web_esp.py
import streamlit as st
from datetime import datetime, timedelta, date, time
import json
import os
import pytz
import pandas as pd
import threading
import random
from PIL import Image
import requests
import paho.mqtt.client as mqtt
import matplotlib.pyplot as plt  # <-- added for plotting
#import seaborn as sns
#from streamlit_autorefresh import st_autorefresh
# -----------------------
# Config & helpers
# -----------------------
st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
#st_autorefresh(interval=60 * 1000, key="init_refresh")

# --- I18N ---
lang = st.sidebar.selectbox("üåê Language / Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
vi = lang == "Ti·∫øng Vi·ªát"
def _(vi_text, en_text):
    return vi_text if vi else en_text

# Files
DATA_FILE = "crop_data.json"
HISTORY_FILE = "history_irrigation.json"
FLOW_FILE = "flow_data.json"  # l∆∞u d·ªØ li·ªáu l∆∞u l∆∞·ª£ng (esp32) theo th·ªùi gian
CONFIG_FILE = "config.json"   # l∆∞u c·∫•u h√¨nh chung: khung gi·ªù t∆∞·ªõi + ch·∫ø ƒë·ªô

def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    else:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# -----------------------
# Helper: gi·ªØ d·ªØ li·ªáu trong v√≤ng N ng√†y (m·∫∑c ƒë·ªãnh 365)
# -----------------------
def filter_recent_list(lst, time_key, days=365):
    """
    lst: list of dicts
    time_key: key string containing ISO timestamp (e.g. 'timestamp' or 'time')
    returns filtered list containing only records within last `days` days
    """
    try:
        cutoff = datetime.now(vn_tz) - timedelta(days=days)
    except Exception:
        cutoff = datetime.utcnow() - timedelta(days=days)
    out = []
    for item in lst:
        ts = item.get(time_key)
        if not ts:
            continue
        try:
            dt = datetime.fromisoformat(ts)
        except:
            try:
                dt = datetime.strptime(ts, "%Y-%m-%dT%H:%M:%S")
            except:
                continue
        # ensure timezone-aware comparison
        if dt.tzinfo is None:
            dt = vn_tz.localize(dt)
        if dt >= cutoff:
            out.append(item)
    return out

# Timezone
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")

# H√†m th√™m record l∆∞u l∆∞·ª£ng v√†o flow_data
def add_flow_record(flow_val, location=""):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "time": now_iso,
        "flow": flow_val,
        "location": location,
    }
    flow = load_json(FLOW_FILE, [])
    flow.append(new_record)
    # l∆∞u lu√¥n sau khi th√™m
    save_json(FLOW_FILE, flow)

# H√†m th√™m record c·∫£m bi·∫øn v√†o history
def add_history_record(sensor_hum, sensor_temp, location=""):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "timestamp": now_iso,
        "sensor_hum": sensor_hum,
        "sensor_temp": sensor_temp,
        "location": location,
    }
    history = load_json(HISTORY_FILE, [])
    history.append(new_record)
    save_json(HISTORY_FILE, history)

# H√†m chuy·ªÉn list dict l·ªãch s·ª≠ th√†nh DataFrame v√† s·∫Øp x·∫øp theo th·ªùi gian
def to_df(lst):
    if not lst:
        return pd.DataFrame()
    df = pd.DataFrame(lst)
    time_col = "timestamp" if "timestamp" in df.columns else ("time" if "time" in df.columns else None)
    if time_col:
        df[time_col] = pd.to_datetime(df[time_col], errors='coerce')
        df = df.dropna(subset=[time_col])
        df = df.sort_values(by=time_col)
        df = df.reset_index(drop=True)
    return df

# -----------------------
# Load persistent data (v√† l·ªçc l·ªãch s·ª≠ ch·ªâ 1 nƒÉm g·∫ßn nh·∫•t)
# -----------------------
crop_data = load_json(DATA_FILE, {})
# load full then filter history & flow to recent 365 days
_raw_history = load_json(HISTORY_FILE, [])
_raw_flow = load_json(FLOW_FILE, [])
# filter
history_data = filter_recent_list(_raw_history, "timestamp", days=365)
flow_data = filter_recent_list(_raw_flow, "time", days=365)
# save trimmed back (so file size won't keep growing indefinitely)
save_json(HISTORY_FILE, history_data)
save_json(FLOW_FILE, flow_data)

# config default
config = load_json(CONFIG_FILE, {"watering_schedule": "06:00-08:00", "mode": "auto"})

# -----------------------
# UI - Header & Logo
# -----------------------
try:
    st.markdown("""
    <style>
    .block-container { padding-top: 1rem; }
    h3 { color: #000000 !important; font-size: 20px !important; font-family: Arial, sans-serif !important; font-weight: bold !important; }
    .led { display:inline-block; width:14px; height:14px; border-radius:50%; margin-right:6px; }
    </style>
    """, unsafe_allow_html=True)
    st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå Kh√¥ng t√¨m th·∫•y logo.png", "‚ùå logo.png not found"))

now = datetime.now(vn_tz)
st.markdown(f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh', 'Smart Agricultural Irrigation System') } üåæ</h2>", unsafe_allow_html=True)
st.markdown(f"<h3>‚è∞ { _('Th·ªùi gian hi·ªán t·∫°i', 'Current time') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# -----------------------
# Sidebar - role, auth
# -----------------------
st.sidebar.title(_("üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng", "üîê Select User Role"))
user_type = st.sidebar.radio(_("B·∫°n l√†:", "You are:"), [_("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"), _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer")])

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    password = st.sidebar.text_input(_("üîë Nh·∫≠p m·∫≠t kh·∫©u:", "üîë Enter password:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", "‚ùå Incorrect password. Access denied."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ X√°c th·ª±c th√†nh c√¥ng.", "‚úÖ Authentication successful."))

# -----------------------
# Locations & crops
# -----------------------
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("TP. H·ªì Ch√≠ Minh", "Ho Chi Minh City"),
    "H√† N·ªôi": _("H√† N·ªôi", "Hanoi"),
    "C·∫ßn Th∆°": _("C·∫ßn Th∆°", "Can Tho"),
    "ƒê√† N·∫µng": _("ƒê√† N·∫µng", "Da Nang"),
    "B√¨nh D∆∞∆°ng": _("B√¨nh D∆∞∆°ng", "Binh Duong"),
    "ƒê·ªìng Nai": _("ƒê·ªìng Nai", "Dong Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
selected_city_display = st.selectbox(_("üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:", "üìç Select location:"), location_display_names)
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

crops = {
    "Ng√¥": (75, 100),
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90),
}
required_soil_moisture = {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
crop_names = {"Ng√¥": _("Ng√¥", "Corn"), "Chu·ªëi": _("Chu·ªëi", "Banana"), "·ªöt": _("·ªöt", "Chili pepper")}

# -----------------------
# Crop management
# -----------------------
st.header(_("üå± Qu·∫£n l√Ω c√¢y tr·ªìng", "üå± Crop Management"))
mode_flag = config.get("mode", "auto")

# --- NEW: For controller - choose sub-plot (khu v·ª±c con) and view planting history (1 year)
if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("Th√™m / C·∫≠p nh·∫≠t v√πng tr·ªìng", "Add / Update Plantings"))
    multiple = st.checkbox(_("Tr·ªìng nhi·ªÅu lo·∫°i tr√™n khu v·ª±c n√†y", "Plant multiple crops in this location"), value=False)
    if selected_city not in crop_data:
        crop_data[selected_city] = {"plots": [], "mode": mode_flag}
    if multiple:
        st.markdown(_("Th√™m t·ª´ng lo·∫°i c√¢y v√†o khu v·ª±c (b·∫•m 'Th√™m c√¢y')", "Add each crop to the area (click 'Add crop')"))
        col1, col2 = st.columns([2, 1])
        with col1:
            add_crop = st.selectbox(_("Ch·ªçn lo·∫°i c√¢y ƒë·ªÉ th√™m", "Select crop to add"), [crop_names[k] for k in crops.keys()])
            add_crop_key = next(k for k, v in crop_names.items() if v == add_crop)
            add_planting_date = st.date_input(_("Ng√†y gieo tr·ªìng", "Planting date for this crop"), value=date.today())
        with col2:
            if st.button(_("‚ûï Th√™m c√¢y", "‚ûï Add crop")):
                crop_entry = {"crop": add_crop_key, "planting_date": add_planting_date.isoformat()}
                crop_data[selected_city]["plots"].append(crop_entry)
                save_json(DATA_FILE, crop_data)
                st.success(_("ƒê√£ th√™m c√¢y v√†o khu v·ª±c.", "Crop added to location."))
    else:
        crop_display_names = [crop_names[k] for k in crops.keys()]
        selected_crop_display = st.selectbox(_("üå± Ch·ªçn lo·∫°i n√¥ng s·∫£n:", "üå± Select crop type:"), crop_display_names)
        selected_crop = next(k for k, v in crop_names.items() if v == selected_crop_display)
        planting_date = st.date_input(_("üìÖ Ng√†y gieo tr·ªìng:", "üìÖ Planting date:"), value=date.today())
        if st.button(_("üíæ L∆∞u th√¥ng tin tr·ªìng", "üíæ Save planting info")):
            crop_data[selected_city] = {"plots": [{"crop": selected_crop, "planting_date": planting_date.isoformat()}], "mode": mode_flag}
            save_json(DATA_FILE, crop_data)
            st.success(_("ƒê√£ l∆∞u th√¥ng tin tr·ªìng.", "Planting info saved."))

    # --- NEW: Show planting history (last 1 year) for controller
    st.subheader(_("üìö L·ªãch s·ª≠ c√¢y ƒë√£ tr·ªìng (1 nƒÉm)", "üìö Planting history (1 year)"))
    plots_all = crop_data.get(selected_city, {}).get("plots", [])
    if plots_all:
        rows_hist = []
        cutoff_dt = date.today() - timedelta(days=365)
        for idx, p in enumerate(plots_all):
            crop_k = p.get("crop")
            pd_iso = p.get("planting_date")
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            if pd_date >= cutoff_dt:
                rows_hist.append({
                    "plot_index": idx,
                    "crop": crop_names.get(crop_k, crop_k),
                    "planting_date": pd_date.strftime("%d/%m/%Y")
                })
        if rows_hist:
            df_hist_plants = pd.DataFrame(rows_hist)
            st.dataframe(df_hist_plants)
        else:
            st.info(_("Kh√¥ng c√≥ c√¢y ƒë∆∞·ª£c tr·ªìng trong v√≤ng 1 nƒÉm t·∫°i khu v·ª±c n√†y.", "No plantings within last 1 year in this location."))
    else:
        st.info(_("Ch∆∞a c√≥ v√πng tr·ªìng n√†o trong khu v·ª±c n√†y.", "No plots in this location yet."))

# --- NEW: Controller - choose which plot to control pump for
if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("üö∞ ƒêi·ªÅu khi·ªÉn b∆°m cho t·ª´ng khu v·ª±c con (plot)", "üö∞ Pump control per plot"))
    plots_for_control = crop_data.get(selected_city, {}).get("plots", [])
    if not plots_for_control:
        st.info(_("Ch∆∞a c√≥ khu v·ª±c con (plot) ƒë·ªÉ ƒëi·ªÅu khi·ªÉn. Vui l√≤ng th√™m v√πng tr·ªìng.", "No sub-plots to control. Please add plantings."))
    else:
        # create friendly labels
        plot_labels = []
        for i, p in enumerate(plots_for_control):
            crop_k = p.get("crop")
            pd_iso = p.get("planting_date", "")
            label = f"Plot {i} - {crop_names.get(crop_k, crop_k)} - {pd_iso}"
            plot_labels.append(label)
        selected_plot_label = st.selectbox(_("Ch·ªçn khu v·ª±c con ƒë·ªÉ ƒëi·ªÅu khi·ªÉn:", "Select plot to control:"), plot_labels)
        selected_plot_index = plot_labels.index(selected_plot_label)
        col_a, col_b = st.columns(2)
        with col_a:
            if st.button(_("üîõ B·∫≠t b∆°m cho khu v·ª±c ƒë√£ ch·ªçn", "üîõ Turn ON pump for selected plot")):
                # l∆∞u l·ªãch s·ª≠ t∆∞·ªõi b·∫Øt ƒë·∫ßu cho plot n√†y
                history_irrigation = load_json(HISTORY_FILE, [])
                new_irrigation = {
                    "location": selected_city,
                    "plot_index": selected_plot_index,
                    "crop": plots_for_control[selected_plot_index].get("crop"),
                    "start_time": datetime.now(vn_tz).isoformat(),
                    "end_time": None,
                }
                history_irrigation.append(new_irrigation)
                save_json(HISTORY_FILE, history_irrigation)
                st.success(_("‚úÖ ƒê√£ b·∫≠t b∆°m cho khu v·ª±c.", "‚úÖ Pump turned ON for selected plot."))
        with col_b:
            if st.button(_("‚èπ D·ª´ng b∆°m cho khu v·ª±c ƒë√£ ch·ªçn", "‚èπ Stop pump for selected plot")):
                history_irrigation = load_json(HISTORY_FILE, [])
                # t√¨m b·∫£n ghi m·ªü g·∫ßn nh·∫•t cho location & plot_index
                for i in reversed(range(len(history_irrigation))):
                    rec = history_irrigation[i]
                    if rec.get("location") == selected_city and rec.get("plot_index") == selected_plot_index and rec.get("end_time") is None:
                        history_irrigation[i]["end_time"] = datetime.now(vn_tz).isoformat()
                        save_json(HISTORY_FILE, history_irrigation)
                        st.success(_("üö∞ ƒê√£ d·ª´ng b∆°m cho khu v·ª±c.", "üö∞ Pump stopped for selected plot."))
                        break
                else:
                    st.info(_("Kh√¥ng t√¨m th·∫•y phi√™n t∆∞·ªõi ƒëang m·ªü cho khu v·ª±c n√†y.", "No open irrigation session found for this plot."))

# -----------------------
# Ng∆∞·ªùi gi√°m s√°t (Monitoring Officer)
# -----------------------
if user_type == _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer"):
    # 2. Hi·ªÉn th·ªã th√¥ng tin c√¢y tr·ªìng
    st.subheader(_("Th√¥ng tin c√¢y tr·ªìng t·∫°i khu v·ª±c", "Plantings at this location"))
    if selected_city in crop_data and crop_data[selected_city].get("plots"):
        plots = crop_data[selected_city]["plots"]
        rows = []
        for p in plots:
            crop_k = p["crop"]
            pd_iso = p["planting_date"]
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            min_d, max_d = crops[crop_k]
            harvest_min = pd_date + timedelta(days=min_d)
            harvest_max = pd_date + timedelta(days=max_d)
            days_planted = (date.today() - pd_date).days
            def giai_doan_cay(crop, days):
                if crop == "Chu·ªëi":
                    if days <= 14: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 180: return _("üåø Ph√°t tri·ªÉn", "üåø Growing")
                    elif days <= 330: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üçå ƒê√£ thu ho·∫°ch", "üçå Harvested")
                elif crop == "Ng√¥":
                    if days <= 25: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 70: return _("üåø Th·ª• ph·∫•n", "üåø Pollination")
                    elif days <= 100: return _("üåº Tr√°i ph√°t tri·ªÉn", "üåº Kernel growth")
                    else: return _("üåΩ ƒê√£ thu ho·∫°ch", "üåΩ Harvested")
                elif crop == "·ªöt":
                    if days <= 20: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 500: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üå∂Ô∏è ƒê√£ thu ho·∫°ch", "üå∂Ô∏è Harvested")
            rows.append({
                "crop": crop_names[crop_k],
                "planting_date": pd_date.strftime("%d/%m/%Y"),
                "expected_harvest_from": harvest_min.strftime("%d/%m/%Y"),
                "expected_harvest_to": harvest_max.strftime("%d/%m/%Y"),
                "days_planted": days_planted,
                "stage": giai_doan_cay(crop_k, days_planted)
            })
        df_plots = pd.DataFrame(rows)
        st.dataframe(df_plots)
    else:
        st.info(_("üìç Ch∆∞a c√≥ th√¥ng tin gieo tr·ªìng t·∫°i khu v·ª±c n√†y.", "üìç No crop information available in this location."))

    # 3. Hi·ªÉn th·ªã l·ªãch s·ª≠ t∆∞·ªõi (ƒë√£ ƒë∆∞·ª£c l·ªçc 1 nƒÉm khi load)
    st.subheader(_("üìú L·ªãch s·ª≠ t∆∞·ªõi n∆∞·ªõc", "üìú Irrigation History"))
    irrigation_hist = load_json(HISTORY_FILE, [])
    filtered_irrigation = [r for r in irrigation_hist if r.get("location") == selected_city]
    if filtered_irrigation:
        df_irrig = pd.DataFrame(filtered_irrigation)
        if "start_time" in df_irrig.columns:
            df_irrig["start_time"] = pd.to_datetime(df_irrig["start_time"])
        if "end_time" in df_irrig.columns:
            df_irrig["end_time"] = pd.to_datetime(df_irrig["end_time"])
        st.dataframe(df_irrig.sort_values(by="start_time", ascending=False))
    else:
        st.info(_("Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞·ªõi cho khu v·ª±c n√†y.", "No irrigation history for this location."))

    # 4. Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ ƒë·ªô ·∫©m ƒë·∫•t v√† l∆∞u l∆∞·ª£ng n∆∞·ªõc (1 nƒÉm)
    st.header(_("üìä Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ c·∫£m bi·∫øn", "üìä Sensor History Charts"))

    history_data = load_json(HISTORY_FILE, [])
    flow_data = load_json(FLOW_FILE, [])

    # L·ªçc d·ªØ li·ªáu l·ªãch s·ª≠ v√† l∆∞u l∆∞·ª£ng theo khu v·ª±c
    filtered_hist = [h for h in history_data if h.get("location") == selected_city]
    filtered_flow = [f for f in flow_data if f.get("location") == selected_city]

    df_hist_all = pd.DataFrame(filtered_hist)
    df_flow_all = pd.DataFrame(filtered_flow)

    # Bi·ªÉu ƒë·ªì ƒë·ªô ·∫©m ƒë·∫•t v√† nhi·ªát ƒë·ªô
    if not df_hist_all.empty and 'timestamp' in df_hist_all.columns:
        df_hist_all['timestamp'] = pd.to_datetime(df_hist_all['timestamp'], errors='coerce')
        fig, ax1 = plt.subplots(figsize=(12, 5))
        ax1.plot(df_hist_all['timestamp'], df_hist_all['sensor_hum'], 'b-', label=_("ƒê·ªô ·∫©m ƒë·∫•t", "Soil Humidity"))
        ax1.set_xlabel(_("Th·ªùi gian", "Time"))
        ax1.set_ylabel(_("ƒê·ªô ·∫©m ƒë·∫•t (%)", "Soil Humidity (%)"), color='b')
        ax1.tick_params(axis='y', labelcolor='b')

        ax2 = ax1.twinx()
        if 'sensor_temp' in df_hist_all.columns:
            ax2.plot(df_hist_all['timestamp'], df_hist_all['sensor_temp'], 'r-', label=_("Nhi·ªát ƒë·ªô", "Temperature"))
            ax2.set_ylabel(_("Nhi·ªát ƒë·ªô (¬∞C)", "Temperature (¬∞C)"), color='r')
            ax2.tick_params(axis='y', labelcolor='r')

        ax1.legend(loc='upper left')
        ax2.legend(loc='upper right')
        plt.title(_("L·ªãch s·ª≠ ƒë·ªô ·∫©m ƒë·∫•t v√† nhi·ªát ƒë·ªô", "Soil Humidity and Temperature History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn cho khu v·ª±c n√†y.", "No sensor data for this location."))

    # Bi·ªÉu ƒë·ªì l∆∞u l∆∞·ª£ng n∆∞·ªõc
    if not df_flow_all.empty and 'time' in df_flow_all.columns:
        df_flow_all['time'] = pd.to_datetime(df_flow_all['time'], errors='coerce')
        fig2, ax3 = plt.subplots(figsize=(12, 3))
        ax3.plot(df_flow_all['time'], df_flow_all['flow'], 'g-', label=_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"))
        ax3.set_xlabel(_("Th·ªùi gian", "Time"))
        ax3.set_ylabel(_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"), color='g')
        ax3.tick_params(axis='y', labelcolor='g')
        ax3.legend()
        plt.title(_("L·ªãch s·ª≠ l∆∞u l∆∞·ª£ng n∆∞·ªõc", "Water Flow History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig2)
    else:
        st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞u l∆∞·ª£ng n∆∞·ªõc cho khu v·ª±c n√†y.", "No water flow data for this location."))

# -----------------------
# Mode and Watering Schedule (shared config.json)
# -----------------------
st.header(_("‚öôÔ∏è C·∫•u h√¨nh chung h·ªá th·ªëng", "‚öôÔ∏è System General Configuration"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(_("### ‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc", "### ‚è≤Ô∏è Watering time window"))
        start_time = st.time_input(
            _("Gi·ªù b·∫Øt ƒë·∫ßu", "Start time"),
            value=datetime.strptime(config["watering_schedule"].split("-")[0], "%H:%M").time(),
        )
        end_time = st.time_input(
            _("Gi·ªù k·∫øt th√∫c", "End time"),
            value=datetime.strptime(config["watering_schedule"].split("-")[1], "%H:%M").time(),
        )
    with col2:
        st.markdown(_("### üîÑ Ch·ªçn ch·∫ø ƒë·ªô", "### üîÑ Select operation mode"))
        main_mode = st.radio(
            _("Ch·ªçn ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn", "Select control mode"),
            [_("T·ª± ƒë·ªông", "Automatic"), _("Th·ªß c√¥ng", "Manual")],
            index=0 if config.get("mode", "auto") == "auto" else 1,
        )

        manual_control_type = None
        if main_mode == _("Th·ªß c√¥ng", "Manual"):
            manual_control_type = st.radio(
                _("Ch·ªçn ph∆∞∆°ng th·ª©c th·ªß c√¥ng", "Select manual control type"),
                [_("Th·ªß c√¥ng tr√™n app", "Manual on app"), _("Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "Manual on cabinet")],
            )

    if st.button(_("üíæ L∆∞u c·∫•u h√¨nh", "üíæ Save configuration")):
        config["watering_schedule"] = f"{start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}"
        if main_mode == _("T·ª± ƒë·ªông", "Automatic"):
            config["mode"] = "auto"
            config.pop("manual_control_type", None)
        else:
            config["mode"] = "manual"
            config["manual_control_type"] = manual_control_type
        save_json(CONFIG_FILE, config)
        st.success(_("ƒê√£ l∆∞u c·∫•u h√¨nh.", "Configuration saved."))

else:
    st.markdown(
        _("‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc hi·ªán t·∫°i:", "‚è≤Ô∏è Current watering time window:") + f" **{config['watering_schedule']}**"
    )
    mode_display = _("T·ª± ƒë·ªông", "Automatic") if config.get("mode", "auto") == "auto" else _("Th·ªß c√¥ng", "Manual")
    st.markdown(_("üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông hi·ªán t·∫°i:", "üîÑ Current operation mode:") + f" **{mode_display}**")
    if config.get("mode") == "manual":
        manual_type_display = config.get("manual_control_type", "")
        if manual_type_display == _("Th·ªß c√¥ng tr√™n app", "Manual on app") or manual_type_display == "Manual on app":
            st.markdown(_("‚öôÔ∏è Ph∆∞∆°ng th·ª©c th·ªß c√¥ng: Th·ªß c√¥ng tr√™n app", "‚öôÔ∏è Manual method: Manual on app"))
        elif manual_type_display == _("Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "Manual on cabinet") or manual_type_display == "Manual on cabinet":
            st.markdown(_("‚öôÔ∏è Ph∆∞∆°ng th·ª©c th·ªß c√¥ng: Th·ªß c√¥ng ·ªü t·ªß ƒëi·ªán", "‚öôÔ∏è Manual method: Manual on cabinet"))

# Ki·ªÉm tra th·ªùi gian trong khung t∆∞·ªõi
def is_in_watering_time():
    now_time = datetime.now(vn_tz).time()
    start_str, end_str = config["watering_schedule"].split("-")
    start_t = datetime.strptime(start_str, "%H:%M").time()
    end_t = datetime.strptime(end_str, "%H:%M").time()
    if start_t <= now_time <= end_t:
        return True
    return False

# -----------------------
# MQTT Client for receiving data from ESP32-WROOM
# -----------------------
mqtt_broker = "broker.hivemq.com"  # Thay broker ph√π h·ª£p
mqtt_port = 1883
mqtt_topic_humidity = "esp32/soil_moisture"
mqtt_topic_flow = "esp32/water_flow"

# Global data containers for live update
live_soil_moisture = []
live_water_flow = []

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(mqtt_topic_humidity)
    client.subscribe(mqtt_topic_flow)

def on_message(client, userdata, msg):
    topic = msg.topic
    payload = msg.payload.decode()
    now_iso = datetime.now(vn_tz).isoformat()
    try:
        val = float(payload)
    except:
        val = None
    if val is not None:
        if topic == mqtt_topic_humidity:
            # attach selected_city as location (current UI selection)
            live_soil_moisture.append({"timestamp": now_iso, "sensor_hum": val, "location": selected_city})
            # L∆∞u v√†o history_data v√† file (append)
            hist = load_json(HISTORY_FILE, [])
            hist.append({"timestamp": now_iso, "sensor_hum": val, "location": selected_city})
            # optionally trim to 1 year after append
            hist_trimmed = filter_recent_list(hist, "timestamp", days=365)
            save_json(HISTORY_FILE, hist_trimmed)
        elif topic == mqtt_topic_flow:
            live_water_flow.append({"time": now_iso, "flow": val, "location": selected_city})
            flow = load_json(FLOW_FILE, [])
            flow.append({"time": now_iso, "flow": val, "location": selected_city})
            flow_trimmed = filter_recent_list(flow, "time", days=365)
            save_json(FLOW_FILE, flow_trimmed)

# T·∫°o client v√† ch·∫°y thread ri√™ng
def mqtt_thread():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(mqtt_broker, mqtt_port, 60)
    client.loop_forever()

threading.Thread(target=mqtt_thread, daemon=True).start()

# -----------------------
# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ªØ li·ªáu m·ªõi nh·∫•t
# -----------------------
st.header(_("üìä Bi·ªÉu ƒë·ªì d·ªØ li·ªáu c·∫£m bi·∫øn hi·ªán t·∫°i", "üìä Current Sensor Data Charts"))
df_soil_live = to_df(live_soil_moisture)
df_flow_live = to_df(live_water_flow)

col1, col2 = st.columns(2)
with col1:
    st.markdown(_("### ƒê·ªô ·∫©m ƒë·∫•t (Sensor Humidity)", "### Soil Moisture"))
    if not df_soil_live.empty:
        st.line_chart(df_soil_live["sensor_hum"])
    else:
        st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t nh·∫≠n t·ª´ ESP32.", "No soil moisture data received from ESP32."))

with col2:
    st.markdown(_("### L∆∞u l∆∞·ª£ng n∆∞·ªõc (Water Flow)", "### Water Flow"))
    if not df_flow_live.empty:
        st.line_chart(df_flow_live["flow"])
    else:
        st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu l∆∞u l∆∞·ª£ng n∆∞·ªõc nh·∫≠n t·ª´ ESP32.", "No water flow data received from ESP32."))

# -----------------------
# Ph·∫ßn t∆∞·ªõi n∆∞·ªõc t·ª± ƒë·ªông ho·∫∑c th·ªß c√¥ng (d√†nh cho ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn)
# -----------------------
if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.header(_("üöø ƒêi·ªÅu khi·ªÉn h·ªá th·ªëng t∆∞·ªõi", "üöø Irrigation Control"))
    # Hi·ªÉn th·ªã tr·∫°ng th√°i t∆∞·ªõi n∆∞·ªõc (gi·∫£ s·ª≠)
    water_on = st.checkbox(_("B·∫≠t b∆°m t∆∞·ªõi", "Pump ON"))
    if water_on:
        st.success(_("B∆°m ƒëang ho·∫°t ƒë·ªông...", "Pump is ON..."))
    else:
        st.info(_("B∆°m ƒëang t·∫Øt", "Pump is OFF"))

    # Logic t·ª± ƒë·ªông t∆∞·ªõi c√≥ th·ªÉ vi·∫øt th√™m
# -----------------------
# Logic t∆∞·ªõi t·ª± ƒë·ªông + l∆∞u l·ªãch s·ª≠ t∆∞·ªõi (ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn)
# -----------------------

import time

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.header(_("üöø ƒêi·ªÅu khi·ªÉn h·ªá th·ªëng t∆∞·ªõi", "üöø Irrigation Control"))

    # L·∫•y th√¥ng tin c√¢y tr·ªìng t·∫°i khu v·ª±c
    plots = crop_data.get(selected_city, {}).get("plots", [])
    if len(plots) == 0:
        st.warning(_("‚ùó Khu v·ª±c ch∆∞a c√≥ c√¢y tr·ªìng. Vui l√≤ng c·∫≠p nh·∫≠t tr∆∞·ªõc khi t∆∞·ªõi.", "‚ùó No crops found in location. Please update before irrigation."))
    else:
        # Gi·∫£ s·ª≠ ch·ªâ t∆∞·ªõi c√¢y ƒë·∫ßu ti√™n trong danh s√°ch plots (ƒë·ªÉ ƒë∆°n gi·∫£n)
        crop_info = plots[0]
        crop_key = crop_info["crop"]
        thresh_moisture = required_soil_moisture.get(crop_key, 65)
        
        # L·∫•y gi√° tr·ªã ƒë·ªô ·∫©m ƒë·∫•t m·ªõi nh·∫•t trong l·ªãch s·ª≠ c·∫£m bi·∫øn c·ªßa khu v·ª±c
        hist_crop = [h for h in history_data if h.get("location") == selected_city]
        if hist_crop:
            latest_data = sorted(hist_crop, key=lambda x: x["timestamp"], reverse=True)[0]
            current_moisture = latest_data.get("sensor_hum", None)
        else:
            current_moisture = None

        st.markdown(f"**{_('C√¢y tr·ªìng hi·ªán t·∫°i', 'Current crop')}:** {crop_names[crop_key]}")
        st.markdown(f"**{_('ƒê·ªô ·∫©m ƒë·∫•t hi·ªán t·∫°i', 'Current soil moisture')}:** {current_moisture if current_moisture is not None else _('Ch∆∞a c√≥ d·ªØ li·ªáu', 'No data yet')} %")
        st.markdown(f"**{_('Ng∆∞·ª°ng ƒë·ªô ·∫©m t·ªëi thi·ªÉu ƒë·ªÉ kh√¥ng t∆∞·ªõi', 'Minimum moisture threshold')}:** {thresh_moisture} %")

        # Ki·ªÉm tra trong khung gi·ªù t∆∞·ªõi
        if is_in_watering_time():
            st.info(_("‚è∞ Hi·ªán ƒëang trong khung gi·ªù t∆∞·ªõi.", "‚è∞ Currently in watering time window."))
            # N·∫øu t·ª± ƒë·ªông
            if config.get("mode", "auto") == "auto":
                if current_moisture is not None and current_moisture < thresh_moisture:
                    # B·∫≠t t∆∞·ªõi t·ª± ƒë·ªông
                    st.success(_("‚úÖ ƒê·ªô ·∫©m th·∫•p, b·∫Øt ƒë·∫ßu t∆∞·ªõi t·ª± ƒë·ªông.", "‚úÖ Moisture low, starting automatic irrigation."))
                    # L∆∞u l·ªãch s·ª≠ t∆∞·ªõi b·∫Øt ƒë·∫ßu
                    history_irrigation = load_json(HISTORY_FILE, [])
                    # N·∫øu t∆∞·ªõi ch∆∞a b·∫≠t l·∫ßn n√†o trong l·ªãch s·ª≠ ƒëang m·ªü
                    if not history_irrigation or history_irrigation[-1].get("end_time") is not None:
                        # include plot_index=0 by default for existing logic
                        new_irrigation = {
                            "location": selected_city,
                            "plot_index": 0,
                            "crop": crop_key,
                            "start_time": datetime.now(vn_tz).isoformat(),
                            "end_time": None,
                        }
                        history_irrigation.append(new_irrigation)
                        # trim & save
                        history_irrigation_trimmed = filter_recent_list(history_irrigation, "start_time", days=365) if False else history_irrigation
                        # (we keep existing entries; main trimming done at load time)
                        save_json(HISTORY_FILE, history_irrigation)
                    # Hi·ªÉn th·ªã n√∫t d·ª´ng t∆∞·ªõi th·ªß c√¥ng
                    if st.button(_("‚èπ D·ª´ng t∆∞·ªõi", "‚èπ Stop irrigation")):
                        history_irrigation = load_json(HISTORY_FILE, [])
                        # C·∫≠p nh·∫≠t th·ªùi gian k·∫øt th√∫c l·∫ßn t∆∞·ªõi g·∫ßn nh·∫•t ch∆∞a ƒë√≥ng
                        for i in reversed(range(len(history_irrigation))):
                            if history_irrigation[i].get("location") == selected_city and history_irrigation[i].get("end_time") is None:
                                history_irrigation[i]["end_time"] = datetime.now(vn_tz).isoformat()
                                save_json(HISTORY_FILE, history_irrigation)
                                st.success(_("üö∞ ƒê√£ d·ª´ng t∆∞·ªõi.", "üö∞ Irrigation stopped."))
                                break
                else:
                    st.info(_("üåø ƒê·ªô ·∫©m ƒë·∫•t ƒë·ªß, kh√¥ng c·∫ßn t∆∞·ªõi.", "üåø Soil moisture adequate, no irrigation needed."))
                    # N·∫øu c√≥ phi√™n t∆∞·ªõi ƒëang m·ªü th√¨ ƒë√≥ng l·∫°i
                    history_irrigation = load_json(HISTORY_FILE, [])
                    if history_irrigation and history_irrigation[-1].get("end_time") is None:
                        history_irrigation[-1]["end_time"] = datetime.now(vn_tz).isoformat()
                        save_json(HISTORY_FILE, history_irrigation)
            else:
                st.warning(_("‚ö†Ô∏è H·ªá th·ªëng ƒëang ·ªü ch·∫ø ƒë·ªô th·ªß c√¥ng.", "‚ö†Ô∏è System is in manual mode."))
        else:
            st.info(_("üïí Kh√¥ng ph·∫£i gi·ªù t∆∞·ªõi.", "üïí Not watering time."))

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ t∆∞·ªõi c·ªßa khu v·ª±c (1 nƒÉm)
    st.subheader(_("üìú L·ªãch s·ª≠ t∆∞·ªõi n∆∞·ªõc", "üìú Irrigation History"))
    irrigation_hist = load_json(HISTORY_FILE, [])
    filtered_irrigation = [r for r in irrigation_hist if r.get("location") == selected_city]
    if filtered_irrigation:
        df_irrig = pd.DataFrame(filtered_irrigation)
        if "start_time" in df_irrig.columns:
            df_irrig["start_time"] = pd.to_datetime(df_irrig["start_time"])
        if "end_time" in df_irrig.columns:
            df_irrig["end_time"] = pd.to_datetime(df_irrig["end_time"])
        st.dataframe(df_irrig.sort_values(by="start_time", ascending=False))
    else:
        st.info(_("Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞·ªõi cho khu v·ª±c n√†y.", "No irrigation history for this location."))

# -----------------------
# K·∫øt th√∫c
# -----------------------
st.markdown("---")
st.markdown(_("¬© 2025 Ng√¥ Nguy·ªÖn ƒê·ªãnh T∆∞·ªùng", "¬© 2025 Ngo Nguyen Dinh Tuong"))
st.markdown(_("¬© 2025 Mai Ph√∫c Khang", "¬© 2025 Mai Phuc Khang"))

