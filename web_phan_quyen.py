# web_esp.py
import streamlit as st
from datetime import datetime, timedelta, date, time
import random
from PIL import Image
import requests
import json
import os
from streamlit_autorefresh import st_autorefresh
import pytz
import pandas as pd
import paho.mqtt.client as mqtt

# Th√¥ng s·ªë MQTT broker
MQTT_BROKER = "broker.hivemq.com"  # ho·∫∑c IP broker c·ªßa b·∫°n
MQTT_PORT = 1883
MQTT_TOPIC = "esp32/pump/control"

def send_mqtt_command(message):
    try:
        client = mqtt.Client()
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        client.publish(MQTT_TOPIC, message)
        client.disconnect()
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i l·ªánh MQTT: {e}")
        return False

# -----------------------
# Config & helpers
# -----------------------
st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
st_autorefresh(interval=60 * 1000, key="init_refresh")

# --- I18N ---
lang = st.sidebar.selectbox("üåê Language / Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
vi = lang == "Ti·∫øng Vi·ªát"
def _(vi_text, en_text):
    return vi_text if vi else en_text

# Files
DATA_FILE = "crop_data.json"
HISTORY_FILE = "history_irrigation.json"
FLOW_FILE = "flow_data.json"  # l∆∞u d·ªØ li·ªáu l∆∞u l∆∞·ª£ng (esp32) theo th·ªùi gian
CONFIG_FILE = "config.json"   # l∆∞u c·∫•u h√¨nh chung: khung gi·ªù t∆∞·ªõi + ch·∫ø ƒë·ªô

def load_json(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    else:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# H√†m th√™m record c·∫£m bi·∫øn v√†o history
def add_history_record(sensor_hum, sensor_temp):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "timestamp": now_iso,
        "sensor_hum": sensor_hum,
        "sensor_temp": sensor_temp
    }
    history = load_json(HISTORY_FILE, [])
    history.append(new_record)
    save_json(HISTORY_FILE, history)

# H√†m th√™m record l∆∞u l∆∞·ª£ng v√†o flow_data
def add_flow_record(flow_val):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "time": now_iso,
        "flow": flow_val
    }
    flow = load_json(FLOW_FILE, [])
    flow.append(new_record)
    save_json(FLOW_FILE, flow)

# Load persistent data
crop_data = load_json(DATA_FILE, {})
history_data = load_json(HISTORY_FILE, [])
flow_data = load_json(FLOW_FILE, [])
config = load_json(CONFIG_FILE, {"watering_schedule": "06:00-08:00", "mode": "auto"})

# timezone
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
now = datetime.now(vn_tz)

# -----------------------
# UI - Header & Logo
# -----------------------
try:
    st.markdown("""
    <style>
    .block-container { padding-top: 1rem; }
    h3 { color: #000000 !important; font-size: 20px !important; font-family: Arial, sans-serif !important; font-weight: bold !important; }
    .led { display:inline-block; width:14px; height:14px; border-radius:50%; margin-right:6px; }
    </style>
    """, unsafe_allow_html=True)
    st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå Kh√¥ng t√¨m th·∫•y logo.png", "‚ùå logo.png not found"))

st.markdown(f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh', 'Smart Agricultural Irrigation System') } üåæ</h2>", unsafe_allow_html=True)
st.markdown(f"<h3>‚è∞ { _('Th·ªùi gian hi·ªán t·∫°i', 'Current time') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# -----------------------
# Sidebar - role, auth
# -----------------------
st.sidebar.title(_("üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng", "üîê Select User Role"))
user_type = st.sidebar.radio(_("B·∫°n l√†:", "You are:"), [_("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"), _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer")])

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    password = st.sidebar.text_input(_("üîë Nh·∫≠p m·∫≠t kh·∫©u:", "üîë Enter password:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", "‚ùå Incorrect password. Access denied."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ X√°c th·ª±c th√†nh c√¥ng.", "‚úÖ Authentication successful."))

# -----------------------
# Locations & crops (unchanged)
# -----------------------
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("TP. H·ªì Ch√≠ Minh", "Ho Chi Minh City"),
    "H√† N·ªôi": _("H√† N·ªôi", "Hanoi"),
    "C·∫ßn Th∆°": _("C·∫ßn Th∆°", "Can Tho"),
    "ƒê√† N·∫µng": _("ƒê√† N·∫µng", "Da Nang"),
    "B√¨nh D∆∞∆°ng": _("B√¨nh D∆∞∆°ng", "Binh Duong"),
    "ƒê·ªìng Nai": _("ƒê·ªìng Nai", "Dong Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
selected_city_display = st.selectbox(_("üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:", "üìç Select location:"), location_display_names)
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

crops = {
    "Ng√¥": (75, 100),
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90),
}
required_soil_moisture = {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
crop_names = {"Ng√¥": _("Ng√¥", "Corn"), "Chu·ªëi": _("Chu·ªëi", "Banana"), "·ªöt": _("·ªöt", "Chili pepper")}

# -----------------------
# Crop management (unchanged)
# -----------------------
st.header(_("üå± Qu·∫£n l√Ω c√¢y tr·ªìng", "üå± Crop Management"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("Th√™m / C·∫≠p nh·∫≠t v√πng tr·ªìng", "Add / Update Plantings"))
    multiple = st.checkbox(_("Tr·ªìng nhi·ªÅu lo·∫°i tr√™n khu v·ª±c n√†y", "Plant multiple crops in this location"), value=False)
    if selected_city not in crop_data:
        crop_data[selected_city] = {"plots": [], "mode": mode_flag}
    if multiple:
        st.markdown(_("Th√™m t·ª´ng lo·∫°i c√¢y v√†o khu v·ª±c (b·∫•m 'Th√™m c√¢y')", "Add each crop to the area (click 'Add crop')"))
        col1, col2 = st.columns([2, 1])
        with col1:
            add_crop = st.selectbox(_("Ch·ªçn lo·∫°i c√¢y ƒë·ªÉ th√™m", "Select crop to add"), [crop_names[k] for k in crops.keys()])
            add_crop_key = next(k for k, v in crop_names.items() if v == add_crop)
            add_planting_date = st.date_input(_("Ng√†y gieo tr·ªìng", "Planting date for this crop"), value=date.today())
        with col2:
            if st.button(_("‚ûï Th√™m c√¢y", "‚ûï Add crop")):
                crop_entry = {"crop": add_crop_key, "planting_date": add_planting_date.isoformat()}
                crop_data[selected_city]["plots"].append(crop_entry)
                save_json(DATA_FILE, crop_data)
                st.success(_("ƒê√£ th√™m c√¢y v√†o khu v·ª±c.", "Crop added to location."))
    else:
        crop_display_names = [crop_names[k] for k in crops.keys()]
        selected_crop_display = st.selectbox(_("üå± Ch·ªçn lo·∫°i n√¥ng s·∫£n:", "üå± Select crop type:"), crop_display_names)
        selected_crop = next(k for k, v in crop_names.items() if v == selected_crop_display)
        planting_date = st.date_input(_("üìÖ Ng√†y gieo tr·ªìng:", "üìÖ Planting date:"), value=date.today())
        if st.button(_("üíæ L∆∞u th√¥ng tin tr·ªìng", "üíæ Save planting info")):
            crop_data[selected_city] = {"plots": [{"crop": selected_crop, "planting_date": planting_date.isoformat()}], "mode": mode_flag}
            save_json(DATA_FILE, crop_data)
            st.success(_("ƒê√£ l∆∞u th√¥ng tin tr·ªìng.", "Planting info saved."))

if user_type == _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer"):
    st.subheader(_("Th√¥ng tin c√¢y tr·ªìng t·∫°i khu v·ª±c", "Plantings at this location"))
    if selected_city in crop_data and crop_data[selected_city].get("plots"):
        plots = crop_data[selected_city]["plots"]
        rows = []
        for p in plots:
            crop_k = p["crop"]
            pd_iso = p["planting_date"]
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            min_d, max_d = crops[crop_k]
            harvest_min = pd_date + timedelta(days=min_d)
            harvest_max = pd_date + timedelta(days=max_d)
            days_planted = (date.today() - pd_date).days
            def giai_doan_cay(crop, days):
                if crop == "Chu·ªëi":
                    if days <= 14: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 180: return _("üåø Ph√°t tri·ªÉn", "üåø Growing")
                    elif days <= 330: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üçå ƒê√£ thu ho·∫°ch", "üçå Harvested")
                elif crop == "Ng√¥":
                    if days <= 25: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 70: return _("üåø Th·ª• ph·∫•n", "üåø Pollination")
                    elif days <= 100: return _("üåº Tr√°i ph√°t tri·ªÉn", "üåº Kernel growth")
                    else: return _("üåΩ ƒê√£ thu ho·∫°ch", "üåΩ Harvested")
                elif crop == "·ªöt":
                    if days <= 20: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
                    elif days <= 500: return _("üåº Ra hoa", "üåº Flowering")
                    else: return _("üå∂Ô∏è ƒê√£ thu ho·∫°ch", "üå∂Ô∏è Harvested")
            rows.append({
                "crop": crop_names[crop_k],
                "planting_date": pd_date.strftime("%d/%m/%Y"),
                "expected_harvest_from": harvest_min.strftime("%d/%m/%Y"),
                "expected_harvest_to": harvest_max.strftime("%d/%m/%Y"),
                "days_planted": days_planted,
                "stage": giai_doan_cay(crop_k, days_planted)
            })
        df_plots = pd.DataFrame(rows)
        st.dataframe(df_plots)
    else:
        st.info(_("üìç Ch∆∞a c√≥ th√¥ng tin gieo tr·ªìng t·∫°i khu v·ª±c n√†y.", "üìç No crop information available in this location."))

# -----------------------
# Mode and Watering Schedule (shared config.json)
# -----------------------
st.header(_("‚öôÔ∏è C·∫•u h√¨nh chung h·ªá th·ªëng", "‚öôÔ∏è System General Configuration"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(_("### ‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc", "### ‚è≤Ô∏è Watering time window"))
        start_time = st.time_input(_("Gi·ªù b·∫Øt ƒë·∫ßu", "Start time"), value=datetime.strptime(config["watering_schedule"].split("-")[0], "%H:%M").time())
        end_time = st.time_input(_("Gi·ªù k·∫øt th√∫c", "End time"), value=datetime.strptime(config["watering_schedule"].split("-")[1], "%H:%M").time())
    with col2:
        st.markdown(_("### üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông", "### üîÑ Operation mode"))
        mode_sel = st.radio(_("Ch·ªçn ch·∫ø ƒë·ªô", "Select mode"), [_("Auto", "Auto"), _("Manual", "Manual")], index=0 if config.get("mode","auto")=="auto" else 1)

    if st.button(_("üíæ L∆∞u c·∫•u h√¨nh", "üíæ Save configuration")):
        # Save to config.json
        config["watering_schedule"] = f"{start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}"
        config["mode"] = "auto" if mode_sel == _("Auto", "Auto") else "manual"
        save_json(CONFIG_FILE, config)
        st.success(_("ƒê√£ l∆∞u c·∫•u h√¨nh.", "Configuration saved."))

else:
    st.markdown(_("‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc hi·ªán t·∫°i:", "‚è≤Ô∏è Current watering time window:") + f" **{config['watering_schedule']}**")
    st.markdown(_("üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông hi·ªán t·∫°i:", "üîÑ Current operation mode:") + f" **{config['mode'].capitalize()}**")

mode_flag = config.get("mode", "auto")

def giai_doan_cay(crop, days):
    if crop == "Chu·ªëi":
        if days <= 14: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 180: return _("üåø Ph√°t tri·ªÉn", "üåø Growing")
        elif days <= 330: return _("üåº Ra hoa", "üåº Flowering")
        else: return _("üçå ƒê√£ thu ho·∫°ch", "üçå Harvested")
    elif crop == "Ng√¥":
        if days <= 25: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 70: return _("üåø Th·ª• ph·∫•n", "üåø Pollination")
        elif days <= 100: return _("üåº Tr√°i ph√°t tri·ªÉn", "üåº Kernel growth")
        else: return _("üåΩ ƒê√£ thu ho·∫°ch", "üåΩ Harvested")
    elif crop == "·ªöt":
        if days <= 20: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 500: return _("üåº Ra hoa", "üåº Flowering")
        else: return _("üå∂Ô∏è ƒê√£ thu ho·∫°ch", "üå∂Ô∏è Harvested")

# -----------------------
# Weather API (unchanged)
# -----------------------
st.subheader(_("üå¶Ô∏è Th·ªùi ti·∫øt hi·ªán t·∫°i", "üå¶Ô∏è Current Weather"))
weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,relative_humidity_2m,precipitation,precipitation_probability&timezone=auto"
try:
    response = requests.get(weather_url, timeout=10)
    response.raise_for_status()
    weather_data = response.json()
    current_weather = weather_data.get("current", {})
except Exception as e:
    st.error(f"‚ùå {_('L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt', 'Error loading weather data')}: {str(e)}")
    current_weather = {"temperature_2m": "N/A", "relative_humidity_2m": "N/A", "precipitation": "N/A", "precipitation_probability": "N/A"}

col1, col2, col3 = st.columns(3)
col1.metric("üå°Ô∏è " + _("Nhi·ªát ƒë·ªô", "Temperature"), f"{current_weather.get('temperature_2m', 'N/A')} ¬∞C")
col2.metric("üíß " + _("ƒê·ªô ·∫©m", "Humidity"), f"{current_weather.get('relative_humidity_2m', 'N/A')} %")
col3.metric("‚òî " + _("Kh·∫£ nƒÉng m∆∞a", "Precipitation Prob."), f"{current_weather.get('precipitation_probability', 'N/A')} %")

# -----------------------
# L·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c t·ª´ ESP32-WROOM (MQTT ho·∫∑c HTTP)
# -----------------------
st.subheader(_("üì° D·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c t·∫ø t·ª´ ESP32", "üì° Real Sensor Data from ESP32"))

# Gi·∫£ ƒë·ªãnh b·∫°n c√≥ m·ªôt file JSON c·∫≠p nh·∫≠t li√™n t·ª•c ho·∫∑c 1 bi·∫øn to√†n c·ª•c l∆∞u d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi nh·∫•t
# V√≠ d·ª• b·∫°n c√≥ th·ªÉ l∆∞u d·ªØ li·ªáu t·ª´ ESP32 v√†o file sensor_data.json (c·∫≠p nh·∫≠t qua MQTT ho·∫∑c HTTP POST)
SENSOR_DATA_FILE = "sensor_data.json"

def load_sensor_data():
    if os.path.exists(SENSOR_DATA_FILE):
        try:
            with open(SENSOR_DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data
        except Exception as e:
            st.error(_("L·ªói khi ƒë·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ file.", "Error reading sensor data file.") + f" {e}")
            return None
    else:
        return None

sensor_data = load_sensor_data()

if sensor_data is None:
    st.error(_("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi ESP32-WROOM ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu.", "‚ùå Cannot connect to ESP32-WROOM or no data available."))
    # C√≥ th·ªÉ ƒë·∫∑t m·∫∑c ƒë·ªãnh ho·∫∑c kh√¥ng hi·ªÉn th·ªã d·ªØ li·ªáu c·∫£m bi·∫øn
    soil_moisture = None
    light_level = None
    water_flow = None
else:
    soil_moisture = sensor_data.get("soil_moisture")
    light_level = sensor_data.get("light")
    water_flow = sensor_data.get("water_flow")
    temperature = sensor_data.get("temperature", None)  # n·∫øu c√≥

    st.write(f"{_('ƒê·ªô ·∫©m ƒë·∫•t', 'Soil Moisture')}: {soil_moisture} %")
    st.write(f"{_('√Ånh s√°ng', 'Light')}: {light_level} lux")
    st.write(f"{_('L∆∞u l∆∞·ª£ng n∆∞·ªõc', 'Water Flow')}: {water_flow} L/min")
    if temperature is not None:
        st.write(f"{_('Nhi·ªát ƒë·ªô', 'Temperature')}: {temperature} ¬∞C")

    # L∆∞u d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi v√†o l·ªãch s·ª≠
    if soil_moisture is not None and temperature is not None:
        add_history_record(soil_moisture, temperature)
    if water_flow is not None:
        add_flow_record(water_flow)

# -----------------------
# Check watering schedule and mode for irrigation decision
# -----------------------
st.header(_("üöø Quy·∫øt ƒë·ªãnh t∆∞·ªõi n∆∞·ªõc", "üöø Irrigation decision"))

start_str, end_str = config["watering_schedule"].split("-")
start_watering = datetime.combine(date.today(), datetime.strptime(start_str, "%H:%M").time()).replace(tzinfo=vn_tz)
end_watering = datetime.combine(date.today(), datetime.strptime(end_str, "%H:%M").time()).replace(tzinfo=vn_tz)

now_vn = datetime.now(vn_tz)

is_in_watering_time = start_watering <= now_vn <= end_watering

if is_in_watering_time:
    st.success(_("‚è∞ Hi·ªán t·∫°i ƒëang trong khung gi·ªù t∆∞·ªõi.", "‚è∞ Currently within watering schedule."))
else:
    st.info(_("‚è∞ Hi·ªán t·∫°i kh√¥ng trong khung gi·ªù t∆∞·ªõi.", "‚è∞ Currently outside watering schedule."))

st.write(f"Mode: **{config['mode']}**")

# T∆∞·ªõi n·∫øu soil moisture d∆∞·ªõi ng∆∞·ª°ng (v√≠ d·ª• 65%)
should_water = simulated_soil_moisture < 65 and config["mode"] == "auto" and is_in_watering_time

if should_water:
    st.warning(_("‚ö†Ô∏è C·∫ßn t∆∞·ªõi n∆∞·ªõc cho c√¢y tr·ªìng.", "‚ö†Ô∏è Irrigation is needed for crops."))
else:
    st.info(_("üíß Kh√¥ng c·∫ßn t∆∞·ªõi n∆∞·ªõc l√∫c n√†y.", "üíß No irrigation needed at this moment."))

# -----------------------
# Show historical charts (ƒë·ªô ·∫©m v√† l∆∞u l∆∞·ª£ng)
# -----------------------
st.header(_("üìä Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ ƒë·ªô ·∫©m, nhi·ªát ƒë·ªô, l∆∞u l∆∞·ª£ng n∆∞·ªõc", "üìä Historical Charts"))

# Ch·ªçn ng√†y hi·ªÉn th·ªã bi·ªÉu ƒë·ªì (m·∫∑c ƒë·ªãnh ng√†y hi·ªán t·∫°i)
chart_date = st.date_input(_("Ch·ªçn ng√†y ƒë·ªÉ xem d·ªØ li·ªáu", "Select date for chart"), value=date.today())

# Load d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ JSON
history_data = load_json(HISTORY_FILE, [])
flow_data = load_json(FLOW_FILE, [])

if len(history_data) == 0 or len(flow_data) == 0:
    st.info(_("üìã Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉn th·ªã.", "üìã No historical data to display."))
else:
    # D√πng pandas ƒë·ªÉ l·ªçc d·ªØ li·ªáu theo ng√†y
    df_hist_all = pd.DataFrame(history_data)
    if 'timestamp' in df_hist_all.columns:
        df_hist_all['timestamp'] = pd.to_datetime(df_hist_all['timestamp'], errors='coerce')
        df_hist_all = df_hist_all.dropna(subset=['timestamp'])
        df_hist_all['date'] = df_hist_all['timestamp'].dt.date
        df_day = df_hist_all[df_hist_all['date'] == chart_date]
    else:
        df_day = pd.DataFrame()

    df_flow_all = pd.DataFrame(flow_data)
    if 'time' in df_flow_all.columns:
        df_flow_all['time'] = pd.to_datetime(df_flow_all['time'], errors='coerce')
        df_flow_all = df_flow_all.dropna(subset=['time'])
        df_flow_all['date'] = df_flow_all['time'].dt.date
        df_flow_day = df_flow_all[df_flow_all['date'] == chart_date]
    else:
        df_flow_day = pd.DataFrame()
    if df_day.empty or df_flow_day.empty:
        st.info(_("üìã Kh√¥ng c√≥ d·ªØ li·ªáu trong ng√†y n√†y.", "üìã No data for selected date."))
    else:
        # Bi·ªÉu ƒë·ªì ƒë·ªô ·∫©m ƒë·∫•t v√† nhi·ªát ƒë·ªô
        import matplotlib.pyplot as plt

        fig, ax1 = plt.subplots(figsize=(12, 5))
        ax1.plot(pd.to_datetime(df_day['timestamp']), df_day['sensor_hum'], 'b-', label=_("ƒê·ªô ·∫©m ƒë·∫•t", "Soil Humidity"))
        ax1.set_xlabel(_("Th·ªùi gian", "Time"))
        ax1.set_ylabel(_("ƒê·ªô ·∫©m ƒë·∫•t (%)", "Soil Humidity (%)"), color='b')
        ax1.tick_params(axis='y', labelcolor='b')

        ax2 = ax1.twinx()
        ax2.plot(pd.to_datetime(df_day['timestamp']), df_day['sensor_temp'], 'r-', label=_("Nhi·ªát ƒë·ªô", "Temperature"))
        ax2.set_ylabel(_("Nhi·ªát ƒë·ªô (¬∞C)", "Temperature (¬∞C)"), color='r')
        ax2.tick_params(axis='y', labelcolor='r')

        ax1.legend(loc='upper left')
        ax2.legend(loc='upper right')
        plt.title(_("L·ªãch s·ª≠ ƒë·ªô ·∫©m ƒë·∫•t v√† nhi·ªát ƒë·ªô", "Soil Humidity and Temperature History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

        # Bi·ªÉu ƒë·ªì l∆∞u l∆∞·ª£ng n∆∞·ªõc
        fig2, ax3 = plt.subplots(figsize=(12, 3))
        ax3.plot(pd.to_datetime(df_flow_day['time']), df_flow_day['flow'], 'g-', label=_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"))
        ax3.set_xlabel(_("Th·ªùi gian", "Time"))
        ax3.set_ylabel(_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"), color='g')
        ax3.tick_params(axis='y', labelcolor='g')
        ax3.legend()
        plt.title(_("L·ªãch s·ª≠ l∆∞u l∆∞·ª£ng n∆∞·ªõc", "Water Flow History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig2)

if config["mode"] == "manual":
    st.info(_("üîß Ch·∫ø ƒë·ªô th·ªß c√¥ng, kh√¥ng g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn b∆°m.", "üîß Manual mode, no pump control command sent."))
    st.write(_("B·∫°n c√≥ th·ªÉ b·∫≠t/t·∫Øt b∆°m th·ªß c√¥ng tr√™n thi·∫øt b·ªã ESP32 (t·ªß ƒëi·ªán).", "You can manually control the pump on ESP32 device (electrical cabinet)."))
else:
    # mode == "auto"
    if should_water:
        st.warning(_("‚ö†Ô∏è C·∫ßn t∆∞·ªõi n∆∞·ªõc cho c√¢y tr·ªìng.", "‚ö†Ô∏è Irrigation is needed for crops."))
        # G·ª≠i l·ªánh b·∫≠t b∆°m t·ª± ƒë·ªông
        send_mqtt_command("ON")
    else:
        st.info(_("üíß Kh√¥ng c·∫ßn t∆∞·ªõi n∆∞·ªõc l√∫c n√†y.", "üíß No irrigation needed at this moment."))
        # G·ª≠i l·ªánh t·∫Øt b∆°m t·ª± ƒë·ªông
        send_mqtt_command("OFF")
# -----------------------
# Footer
# -----------------------
st.markdown("---")
st.caption("üì° API th·ªùi ti·∫øt: Open-Meteo | D·ªØ li·ªáu c·∫£m bi·∫øn: ESP32-WROOM (gi·∫£ l·∫≠p n·∫øu ch∆∞a c√≥)")
st.caption("Ng∆∞·ªùi th·ª±c hi·ªán: Ng√¥ Nguy·ªÖn ƒê·ªãnh T∆∞·ªùng-Mai Ph√∫c Khang")







