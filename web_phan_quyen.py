# web_esp.py
# Smart Irrigation Streamlit app (MQTT) - Updated to only send configuration (watering slots, mode, thresholds)
# ESP32 should handle pump ON/OFF locally based on received config. Web app only displays pump status indicator.

import streamlit as st
from datetime import datetime, timedelta, date, time
import threading
from PIL import Image
import requests
import json
import os
from streamlit_autorefresh import st_autorefresh
import pytz
import pandas as pd
import paho.mqtt.client as mqtt

# -----------------------
# Timezone (used by helpers)
# -----------------------
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")

# -----------------------
# MQTT & sensor state
# -----------------------
sensor_data = None  # bi·∫øn to√†n c·ª•c l∆∞u d·ªØ li·ªáu sensor nh·∫≠n ƒë∆∞·ª£c

MQTT_BROKER = "broker.hivemq.com"
MQTT_PORT = 1883
MQTT_TOPIC_SENSOR = "esp32/sensor/data"
MQTT_TOPIC_CONFIG = "esp32/config/update"  # topic to publish configuration updates to ESP32

# H√†m g·ª≠i c·∫•u h√¨nh MQTT (t·∫°o client m·ªói l·∫ßn ƒë·ªÉ ƒë∆°n gi·∫£n)
def send_config_to_esp32(config_data):
    try:
        client = mqtt.Client()
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        payload = json.dumps(config_data)
        client.publish(MQTT_TOPIC_CONFIG, payload)
        client.disconnect()
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i c·∫•u h√¨nh MQTT: {e}")
        return False

# MQTT callbacks
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("MQTT connected successfully")
        client.subscribe(MQTT_TOPIC_SENSOR)
    else:
        print("MQTT connect failed with code", rc)

def on_message(client, userdata, msg):
    global sensor_data
    try:
        payload = msg.payload.decode("utf-8")
        data = json.loads(payload)
        # expected payload example:
        # {"soil_moisture":45, "soil_temp":28.5, "light":400, "water_flow":2.3, "pump_status":"ON"}
        sensor_data = data
        print(f"Received sensor data: {sensor_data}")
    except Exception as e:
        print("Error parsing MQTT message:", e)


def mqtt_thread():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    try:
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        client.loop_forever()
    except Exception as e:
        print("MQTT thread error:", e)

# Kh·ªüi ch·∫°y MQTT client trong thread ri√™ng
threading.Thread(target=mqtt_thread, daemon=True).start()

# -----------------------
# Config & helpers
# -----------------------
st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
st_autorefresh(interval=60 * 1000, key="init_refresh")
st.markdown("""
    <style>
        label, .stSelectbox label, .stDateInput label, .stTimeInput label, .stRadio label, .stNumberInput label {
            font-size: 20px !important;
            font-weight: bold !important;
        }
        .led { display:inline-block; width:14px; height:14px; border-radius:50%; margin-right:6px; }
    </style>
""", unsafe_allow_html=True)

# --- I18N ---
lang = st.sidebar.selectbox("üåê Language / Ng√¥n ng·ªØ", ["Ti·∫øng Vi·ªát", "English"])
vi = lang == "Ti·∫øng Vi·ªát"

def _(vi_text, en_text):
    return vi_text if vi else en_text

def big_label(vi_text, en_text, size=18):
    text = _(vi_text, en_text)
    return f"<span style='font-size:{size}px; font-weight:700'>{text}</span>"

# Files
DATA_FILE = "crop_data.json"
HISTORY_FILE = "history_irrigation.json"   # l∆∞u l·ªãch s·ª≠ sensor + t∆∞·ªõi
FLOW_FILE = "flow_data.json"
CONFIG_FILE = "config.json"


def load_json(path, default=None):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default
    else:
        return default


def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# H√†m th√™m record c·∫£m bi·∫øn v√†o history
def add_history_record(sensor_hum, sensor_temp):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "timestamp": now_iso,
        "sensor_hum": sensor_hum,
        "sensor_temp": sensor_temp
    }
    history = load_json(HISTORY_FILE, [])
    history.append(new_record)
    # gi·ªØ t·ªëi ƒëa 1 nƒÉm: xo√° record c≈© h∆°n 365 ng√†y
    cutoff = datetime.now(vn_tz) - timedelta(days=365)
    filtered = []
    for r in history:
        try:
            t = datetime.fromisoformat(r.get("timestamp"))
            if t >= cutoff:
                filtered.append(r)
        except:
            filtered.append(r)
    save_json(HISTORY_FILE, filtered)

# H√†m th√™m record l∆∞u l∆∞·ª£ng v√†o flow_data
def add_flow_record(flow_val):
    now_iso = datetime.now(vn_tz).isoformat()
    new_record = {
        "time": now_iso,
        "flow": flow_val
    }
    flow = load_json(FLOW_FILE, [])
    flow.append(new_record)
    # gi·ªØ 1 nƒÉm
    cutoff = datetime.now(vn_tz) - timedelta(days=365)
    filtered = []
    for r in flow:
        try:
            t = datetime.fromisoformat(r.get("time"))
            if t >= cutoff:
                filtered.append(r)
        except:
            filtered.append(r)
    save_json(FLOW_FILE, filtered)

# H√†m th√™m l·ªãch s·ª≠ h√†nh ƒë·ªông t∆∞·ªõi (ch·ªâ ghi s·ª± ki·ªán h·ªá th·ªëng t·ª± ƒë√°nh d·∫•u, kh√¥ng g·ª≠i l·ªánh n·ªØa)
def add_irrigation_action(action, area=None, crop=None):
    now_iso = datetime.now(vn_tz).isoformat()
    rec = {
        "timestamp": now_iso,
        "action": action,  # descriptive action string
        "area": area,
        "crop": crop
    }
    history = load_json(HISTORY_FILE, [])
    history.append(rec)
    # filter 1 year
    cutoff = datetime.now(vn_tz) - timedelta(days=365)
    filtered = []
    for r in history:
        try:
            t = datetime.fromisoformat(r.get("timestamp"))
            if t >= cutoff:
                filtered.append(r)
        except:
            filtered.append(r)
    save_json(HISTORY_FILE, filtered)

# Load persistent data
crop_data = load_json(DATA_FILE, {}) or {}
history_data = load_json(HISTORY_FILE, []) or []
flow_data = load_json(FLOW_FILE, []) or []
config = load_json(CONFIG_FILE, {
    "watering_slots": [{"start": "06:00", "end": "08:00"}],
    "mode": "auto",
    "moisture_thresholds": {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
}) or {}

# ensure keys
if "moisture_thresholds" not in config:
    config["moisture_thresholds"] = {"Ng√¥": 65, "Chu·ªëi": 70, "·ªöt": 65}
if "watering_slots" not in config:
    config["watering_slots"] = [{"start": "06:00", "end": "08:00"}]

now = datetime.now(vn_tz)

# -----------------------
# UI - Header & Logo
# -----------------------
try:
    if os.path.exists("logo1.png"):
        st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå Kh√¥ng t√¨m th·∫•y logo.png", "‚ùå logo.png not found"))

st.markdown(f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh', 'Smart Agricultural Irrigation System') } üåæ</h2>", unsafe_allow_html=True)
st.markdown(f"<h3>‚è∞ { _('Th·ªùi gian hi·ªán t·∫°i', 'Current time') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# -----------------------
# Sidebar - role, auth
# -----------------------
st.sidebar.title(_("üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng", "üîê Select User Role"))
user_type = st.sidebar.radio(_("B·∫°n l√†:", "You are:"), [_("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"), _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer")])

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    password = st.sidebar.text_input(_("üîë Nh·∫≠p m·∫≠t kh·∫©u:", "üîë Enter password:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.", "‚ùå Incorrect password. Access denied."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ X√°c th·ª±c th√†nh c√¥ng.", "‚úÖ Authentication successful."))

# -----------------------
# Locations & crops (unchanged)
# -----------------------
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("TP. H·ªì Ch√≠ Minh", "Ho Chi Minh City"),
    "H√† N·ªôi": _("H√† N·ªôi", "Hanoi"),
    "C·∫ßn Th∆°": _("C·∫ßn Th∆°", "Can Tho"),
    "ƒê√† N·∫µng": _("ƒê√† N·∫µng", "Da Nang"),
    "B√¨nh D∆∞∆°ng": _("B√¨nh D∆∞∆°ng", "Binh Duong"),
    "ƒê·ªìng Nai": _("ƒê·ªìng Nai", "Dong Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
st.markdown(
    f"<label style='font-size:18px; font-weight:700;'>{_('üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:', 'üìç Select location:')}</label>",
    unsafe_allow_html=True
)
selected_city_display = st.selectbox(" ", location_display_names, key="selected_city", label_visibility="collapsed")
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

crops = {
    "Ng√¥": (75, 100),
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90),
}
crop_names = {"Ng√¥": _("Ng√¥", "Corn"), "Chu·ªëi": _("Chu·ªëi", "Banana"), "·ªöt": _("·ªöt", "Chili pepper")}

# -----------------------
# Crop management with areas (updated)
# -----------------------
st.header(_("üå± Qu·∫£n l√Ω c√¢y tr·ªìng", "üå± Crop Management"))

# helper stage function
def giai_doan_cay(crop, days):
    if crop == "Chu·ªëi":
        if days <= 14: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 180: return _("üåø Ph√°t tri·ªÉn", "üåø Growing")
        elif days <= 330: return _("üåº Ra hoa", "üåº Flowering")
        else: return _("üçå ƒê√£ thu ho·∫°ch", "üçå Harvested")
    elif crop == "Ng√¥":
        if days <= 25: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 70: return _("üåø Th·ª• ph·∫•n", "üåø Pollination")
        elif days <= 100: return _("üåº Tr√°i ph√°t tri·ªÉn", "üåº Kernel growth")
        else: return _("üåΩ ƒê√£ thu ho·∫°ch", "üåΩ Harvested")
    elif crop == "·ªöt":
        if days <= 20: return _("üå± M·ªõi tr·ªìng", "üå± Newly planted")
        elif days <= 500: return _("üåº Ra hoa", "üåº Flowering")
        else: return _("üå∂Ô∏è ƒê√£ thu ho·∫°ch", "üå∂Ô∏è Harvested")

# ensure structure
if selected_city not in crop_data or not isinstance(crop_data[selected_city], dict):
    crop_data[selected_city] = {}
if "areas" not in crop_data[selected_city] or not isinstance(crop_data[selected_city]["areas"], dict):
    crop_data[selected_city]["areas"] = {}

areas = crop_data[selected_city]["areas"]

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    st.subheader(_("üåø Qu·∫£n l√Ω khu v·ª±c tr·ªìng c√¢y", "üåø Manage Planting Areas"))

    area_list = list(areas.keys())
    area_list.append(_("‚ûï Th√™m khu v·ª±c m·ªõi", "‚ûï Add new area"))
    st.markdown(
        f"<label style='font-size:18px; font-weight:700;'>{_('Ch·ªçn khu v·ª±c tr·ªìng', 'Select planting area')}</label>",
        unsafe_allow_html=True
    )
    selected_area = st.selectbox(" ", area_list, key="selected_area", label_visibility="collapsed")

    if selected_area == _("‚ûï Th√™m khu v·ª±c m·ªõi", "‚ûï Add new area"):
        new_area_name = st.text_input(_("Nh·∫≠p t√™n khu v·ª±c m·ªõi", "Enter new area name"))
        if new_area_name:
            if new_area_name not in areas:
                areas[new_area_name] = []
                crop_data[selected_city]["areas"] = areas
                save_json(DATA_FILE, crop_data)
                st.success(_("ƒê√£ t·∫°o khu v·ª±c m·ªõi.", "New area created."))
                selected_area = new_area_name
            else:
                st.warning(_("Khu v·ª±c ƒë√£ t·ªìn t·∫°i.", "Area already exists."))

    # th√™m c√¢y v√†o khu v·ª±c
    if selected_area in areas:
        st.subheader(_("Th√™m c√¢y v√†o khu v·ª±c", "Add crop to area"))
        add_crop_display = st.selectbox(_("Ch·ªçn lo·∫°i c√¢y ƒë·ªÉ th√™m", "Select crop to add"), [crop_names[k] for k in crops.keys()])
        add_crop_key = next(k for k, v in crop_names.items() if v == add_crop_display)
        st.markdown(
            f"<label style='font-size:20px; font-weight:700;'>{_('Ng√†y gieo tr·ªìng', 'Planting date for this crop')}</label>",
            unsafe_allow_html=True
        )
        add_planting_date = st.date_input(" ", value=date.today(), key=f"planting_date_{add_crop_key}", label_visibility="collapsed")

        if st.button(_("‚ûï Th√™m c√¢y", "‚ûï Add crop")):
            crop_entry = {"crop": add_crop_key, "planting_date": add_planting_date.isoformat()}
            areas[selected_area].append(crop_entry)
            crop_data[selected_city]["areas"] = areas
            save_json(DATA_FILE, crop_data)
            st.success(_("ƒê√£ th√™m c√¢y v√†o khu v·ª±c.", "Crop added to area."))

    # hi·ªÉn th·ªã c√¢y trong selected_area
    if selected_area in areas and areas[selected_area]:
        st.subheader(_("Th√¥ng tin c√¢y tr·ªìng trong khu v·ª±c", "Plantings in area"))
        rows = []
        for p in areas[selected_area]:
            crop_k = p["crop"]
            pd_iso = p["planting_date"]
            try:
                pd_date = date.fromisoformat(pd_iso)
            except:
                pd_date = date.today()
            min_d, max_d = crops[crop_k]
            harvest_min = pd_date + timedelta(days=min_d)
            harvest_max = pd_date + timedelta(days=max_d)
            days_planted = (date.today() - pd_date).days
            rows.append({
                "crop": crop_names[crop_k],
                "planting_date": pd_date.strftime("%d/%m/%Y"),
                "expected_harvest_from": harvest_min.strftime("%d/%m/%Y"),
                "expected_harvest_to": harvest_max.strftime("%d/%m/%Y"),
                "days_planted": days_planted,
                "stage": giai_doan_cay(crop_k, days_planted)
            })
        df_plots = pd.DataFrame(rows)
        st.dataframe(df_plots)
    else:
        st.info(_("Khu v·ª±c n√†y ch∆∞a c√≥ c√¢y tr·ªìng.", "No crops planted in this area yet."))

    # ---- Ph·∫ßn c·∫•u h√¨nh ng∆∞·ª°ng ƒë·ªô ·∫©m cho t·ª´ng lo·∫°i c√¢y (ch·ªâ controller) ----
    moisture_thresholds = config.get("moisture_thresholds", {"Ng√¥":65, "Chu·ªëi":70, "·ªöt":65})
    st.markdown(
        f"<label style='font-size:18px; font-weight:700;'>{_('ƒê·∫∑t ng∆∞·ª°ng ƒë·ªô ·∫©m cho c√°c lo·∫°i c√¢y (0-100%)', 'Set moisture thresholds for crops (0-100%)')}</label>",
        unsafe_allow_html=True
    )
    cols = st.columns(len(moisture_thresholds))
    i = 0
    for crop_k, val in moisture_thresholds.items():
        with cols[i]:
            new_val = st.slider(f"{crop_names.get(crop_k,crop_k)} ", min_value=0, max_value=100, value=val, key=f"thr_{crop_k}")
            moisture_thresholds[crop_k] = new_val
        i += 1

elif user_type == _("Ng∆∞·ªùi gi√°m s√°t", " Monitoring Officer"):
    st.subheader(_("üåø Xem th√¥ng tin c√¢y tr·ªìng theo khu v·ª±c", "View plantings by area"))
    if areas:
        selected_area = st.selectbox(_("Ch·ªçn khu v·ª±c ƒë·ªÉ xem", "Select area to view"), list(areas.keys()))
        if selected_area in areas and areas[selected_area]:
            rows = []
            for p in areas[selected_area]:
                crop_k = p["crop"]
                pd_iso = p["planting_date"]
                try:
                    pd_date = date.fromisoformat(pd_iso)
                except:
                    pd_date = date.today()
                min_d, max_d = crops[crop_k]
                harvest_min = pd_date + timedelta(days=min_d)
                harvest_max = pd_date + timedelta(days=max_d)
                days_planted = (date.today() - pd_date).days
                rows.append({
                    "crop": crop_names[crop_k],
                    "planting_date": pd_date.strftime("%d/%m/%Y"),
                    "expected_harvest_from": harvest_min.strftime("%d/%m/%Y"),
                    "expected_harvest_to": harvest_max.strftime("%d/%m/%Y"),
                    "days_planted": days_planted,
                    "stage": giai_doan_cay(crop_k, days_planted)
                })
            df_plots = pd.DataFrame(rows)
            st.dataframe(df_plots)
        else:
            st.info(_("Khu v·ª±c n√†y ch∆∞a c√≥ c√¢y tr·ªìng.", "No crops planted in this area yet."))
    else:
        st.info(_("Ch∆∞a c√≥ khu v·ª±c tr·ªìng n√†o.", "No planting areas available."))

# -----------------------
# Mode and Watering Schedule (shared config.json)
# -----------------------
st.header(_("‚öôÔ∏è C·∫•u h√¨nh chung h·ªá th·ªëng", "‚öôÔ∏è System General Configuration"))

if user_type == _("Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn", "Control Administrator"):
    col1, col2 = st.columns(2)

    with col1:
        st.markdown(_("### ‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc", "### ‚è≤Ô∏è Watering time window"))

        # L·∫•y d·ªØ li·ªáu c≈© ho·∫∑c m·∫∑c ƒë·ªãnh
        default_slots = config.get("watering_slots", [{"start":"06:00","end":"08:00"}])
        num_slots = st.number_input(_("S·ªë khung gi·ªù", "Number of slots"), min_value=1, max_value=5, value=len(default_slots))

        watering_slots = []
        for i in range(num_slots):
            slot = default_slots[i] if i < len(default_slots) else {"start": "06:00", "end": "06:30"}
            c1, c2 = st.columns(2)
            start_t = c1.time_input(_("B·∫Øt ƒë·∫ßu", "Start"), value=datetime.strptime(slot["start"], "%H:%M").time(), key=f"start_{i}")
            end_t = c2.time_input(_("K·∫øt th√∫c", "End"), value=datetime.strptime(slot["end"], "%H:%M").time(), key=f"end_{i}")
            watering_slots.append({"start": start_t.strftime("%H:%M"), "end": end_t.strftime("%H:%M")})

    with col2:
        st.markdown(_("### üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông", "### üîÑ Operation mode"))
        st.markdown(
            f"<label style='font-size:18px; font-weight:700;'>{_('Ch·ªçn ch·∫ø ƒë·ªô', 'Select mode')}</label>",
            unsafe_allow_html=True
        )
        mode_sel = st.radio(" ", [_("Auto", "Auto"), _("Manual", "Manual")], index=0 if config.get("mode","auto")=="auto" else 1, key="mode_sel", label_visibility="collapsed")

    # N√∫t l∆∞u c·∫•u h√¨nh chung (g·ª≠i config ƒë·∫øn ESP32 thay v√¨ l·ªánh b·∫≠t/t·∫Øt)
    if st.button(_("üíæ L∆∞u c·∫•u h√¨nh v√† g·ª≠i t·ªõi ESP32", "üíæ Save configuration and send to ESP32")):
        config["watering_slots"] = watering_slots
        config["mode"] = "auto" if mode_sel == _("Auto", "Auto") else "manual"
        config["moisture_thresholds"] = moisture_thresholds
        save_json(CONFIG_FILE, config)

        ok = send_config_to_esp32(config)
        if ok:
            st.success(_("ƒê√£ l∆∞u c·∫•u h√¨nh v√† g·ª≠i t·ªõi ESP32.", "Configuration saved and sent to ESP32."))
        else:
            st.warning(_("C·∫•u h√¨nh ƒë√£ l∆∞u c·ª•c b·ªô nh∆∞ng g·ª≠i t·ªõi ESP32 th·∫•t b·∫°i.", "Configuration saved locally but failed to send to ESP32."))

else:
    # display current config (read-only)
    ws = config.get("watering_slots", [{"start":"06:00","end":"08:00"}])
    ws_str = ", ".join([f"{s['start']}-{s['end']}" for s in ws])
    st.markdown(_("‚è≤Ô∏è Khung gi·ªù t∆∞·ªõi n∆∞·ªõc hi·ªán t·∫°i:", "‚è≤Ô∏è Current watering time window:") + f" **{ws_str}**")
    st.markdown(_("üîÑ Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông hi·ªán t·∫°i:", "üîÑ Current operation mode:") + f" **{config.get('mode','auto').capitalize()}**")

mode_flag = config.get("mode", "auto")

# -----------------------
# Weather API (unchanged)
# -----------------------
st.subheader(_("üå¶Ô∏è Th·ªùi ti·∫øt hi·ªán t·∫°i", "üå¶Ô∏è Current Weather"))
weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,relative_humidity_2m,precipitation,precipitation_probability&timezone=auto"
try:
    response = requests.get(weather_url, timeout=10)
    response.raise_for_status()
    weather_data = response.json()
    current_weather = weather_data.get("current", {})
except Exception as e:
    st.error(f"‚ùå {_('L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt', 'Error loading weather data')}: {str(e)}")
    current_weather = {"temperature_2m": "N/A", "relative_humidity_2m": "N/A", "precipitation": "N/A", "precipitation_probability": "N/A"}

col1, col2, col3 = st.columns(3)
col1.markdown(big_label("üå°Ô∏è Nhi·ªát ƒë·ªô", "üå°Ô∏è Temperature"), unsafe_allow_html=True)
col1.metric("", f"{current_weather.get('temperature_2m', 'N/A')} ¬∞C")

col2.markdown(big_label("üíß ƒê·ªô ·∫©m", "üíß Humidity"), unsafe_allow_html=True)
col2.metric("", f"{current_weather.get('relative_humidity_2m', 'N/A')} %")

col3.markdown(big_label("‚òî Kh·∫£ nƒÉng m∆∞a", "‚òî Precipitation Probability"), unsafe_allow_html=True)
col3.metric("", f"{current_weather.get('precipitation_probability', 'N/A')} %")

# -----------------------
# Sensor data from ESP32
# -----------------------
st.subheader(_("üì° D·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c t·∫ø (ESP32)", "üì° Real sensor data (ESP32)"))

pump_status = "UNKNOWN"

if sensor_data:
    soil_moisture = sensor_data.get("soil_moisture")
    soil_temp = sensor_data.get("soil_temp")
    light_level = sensor_data.get("light")
    water_flow = sensor_data.get("water_flow")
    pump_status = sensor_data.get("pump_status", "OFF")

    st.write(f"- {_('ƒê·ªô ·∫©m ƒë·∫•t hi·ªán t·∫°i', 'Current soil moisture')}: {soil_moisture} %")
    st.write(f"- {_('Nhi·ªát ƒë·ªô ƒë·∫•t', 'Soil temperature')}: {soil_temp} ¬∞C")
    st.write(f"- {_('C∆∞·ªùng ƒë·ªô √°nh s√°ng', 'Light intensity')}: {light_level} lux")
    st.write(f"- {_('L∆∞u l∆∞·ª£ng n∆∞·ªõc', 'Water flow')}: {water_flow} L/min")

    # LED pump status
    led_color = "#00FF00" if str(pump_status).upper() == "ON" else "#555555"
    st.markdown(f"<div style='display:flex; align-items:center;'><div class='led' style='background-color:{led_color};'></div><strong>{_('Tr·∫°ng th√°i b∆°m', 'Pump status')}: {pump_status}</strong></div>", unsafe_allow_html=True)

    # L∆∞u d·ªØ li·ªáu m·ªõi v√†o l·ªãch s·ª≠
    if soil_moisture is not None and soil_temp is not None:
        add_history_record(soil_moisture, soil_temp)
    if water_flow is not None:
        add_flow_record(water_flow)
else:
    st.info(_("Ch∆∞a c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c t·∫ø t·ª´ ESP32.", "No real sensor data from ESP32 yet."))
    soil_moisture = None

# -----------------------
# Irrigation decision (web no longer sends ON/OFF)
# -----------------------
st.header(_("üö∞ ƒêi·ªÅu khi·ªÉn t∆∞·ªõi n∆∞·ªõc (Web ch·ªâ g·ª≠i c·∫•u h√¨nh - ESP32 t·ª± x·ª≠ l√Ω)", "üö∞ Irrigation Control (Web only sends config - ESP32 handles pump)") )

# For backward display compatibility show current effective watering schedule string
ws = config.get("watering_slots", [{"start":"06:00","end":"08:00"}])
ws_str = ", ".join([f"{s['start']}-{s['end']}" for s in ws])
st.write(f"- {_('Khung gi·ªù t∆∞·ªõi n∆∞·ªõc (ƒë√£ g·ª≠i)', 'Watering schedule (sent)')}: {ws_str}")
st.write(f"- {_('Ch·∫ø ƒë·ªô (ƒë√£ g·ª≠i)', 'Mode (sent)')}: {config.get('mode','auto')}")
st.write(f"- {_('Ng∆∞·ª°ng ƒë·ªô ·∫©m (ƒë√£ g·ª≠i)', 'Moisture thresholds (sent)')}: {config.get('moisture_thresholds', {})}")
st.write(f"- {_('Th·ªùi gian hi·ªán t·∫°i', 'Current time')}: {datetime.now(vn_tz).strftime('%H:%M:%S')}")
st.write(f"- {_('D·ªØ li·ªáu ƒë·ªô ·∫©m hi·ªán t·∫°i', 'Current soil moisture')}: {soil_moisture if soil_moisture is not None else 'N/A'} %")

if config.get('mode','auto') == 'manual':
    st.info(_("üîß Ch·∫ø ƒë·ªô th·ªß c√¥ng - ESP32 s·∫Ω ch·ªù c·∫•u h√¨nh 'manual' v√† ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn c√≥ th·ªÉ thay ƒë·ªïi ng∆∞·ª°ng/khung gi·ªù t·ª´ web.", "üîß Manual mode - ESP32 will use mode 'manual' and controller may update thresholds/schedule from web."))

# -----------------------
# Show historical charts (ƒë·ªô ·∫©m v√† l∆∞u l∆∞·ª£ng)
# -----------------------
st.header(_("üìä Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ ƒë·ªô ·∫©m, nhi·ªát ƒë·ªô, l∆∞u l∆∞·ª£ng n∆∞·ªõc", "üìä Historical Charts"))

st.markdown(
    f"<label style='font-size:18px; font-weight:700;'>{_('Ch·ªçn ng√†y ƒë·ªÉ xem d·ªØ li·ªáu', 'Select date for chart')}</label>",
    unsafe_allow_html=True
)
chart_date = st.date_input(" ", value=date.today(), key="chart_date", label_visibility="collapsed")

history_data = load_json(HISTORY_FILE, []) or []
flow_data = load_json(FLOW_FILE, []) or []

if len(history_data) == 0 or len(flow_data) == 0:
    st.info(_("üìã Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉn th·ªã.", "üìã No historical data to display."))
else:
    df_hist_all = pd.DataFrame(history_data)
    if 'timestamp' in df_hist_all.columns:
        df_hist_all['timestamp'] = pd.to_datetime(df_hist_all['timestamp'], errors='coerce')
        df_hist_all = df_hist_all.dropna(subset=['timestamp'])
        df_hist_all['date'] = df_hist_all['timestamp'].dt.date
        df_day = df_hist_all[df_hist_all['date'] == chart_date]
    else:
        df_day = pd.DataFrame()

    df_flow_all = pd.DataFrame(flow_data)
    if 'time' in df_flow_all.columns:
        df_flow_all['time'] = pd.to_datetime(df_flow_all['time'], errors='coerce')
        df_flow_all = df_flow_all.dropna(subset=['time'])
        df_flow_all['date'] = df_flow_all['time'].dt.date
        df_flow_day = df_flow_all[df_flow_all['date'] == chart_date]
    else:
        df_flow_day = pd.DataFrame()
    if df_day.empty or df_flow_day.empty:
        st.info(_("üìã Kh√¥ng c√≥ d·ªØ li·ªáu trong ng√†y n√†y.", "üìã No data for selected date."))
    else:
        import matplotlib.pyplot as plt
        fig, ax1 = plt.subplots(figsize=(12, 5))
        ax1.plot(pd.to_datetime(df_day['timestamp']), df_day['sensor_hum'], label=_("ƒê·ªô ·∫©m ƒë·∫•t", "Soil Humidity"))
        ax1.set_xlabel(_("Th·ªùi gian", "Time"))
        ax1.set_ylabel(_("ƒê·ªô ·∫©m ƒë·∫•t (%)", "Soil Humidity (%)"))
        ax2 = ax1.twinx()
        ax2.plot(pd.to_datetime(df_day['timestamp']), df_day['sensor_temp'], label=_("Nhi·ªát ƒë·ªô", "Temperature"))
        ax2.set_ylabel(_("Nhi·ªát ƒë·ªô (¬∞C)", "Temperature (¬∞C)"))
        ax1.legend(loc='upper left')
        ax2.legend(loc='upper right')
        plt.title(_("L·ªãch s·ª≠ ƒë·ªô ·∫©m ƒë·∫•t v√† nhi·ªát ƒë·ªô", "Soil Humidity and Temperature History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)

        fig2, ax3 = plt.subplots(figsize=(12, 3))
        ax3.plot(pd.to_datetime(df_flow_day['time']), df_flow_day['flow'], label=_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"))
        ax3.set_xlabel(_("Th·ªùi gian", "Time"))
        ax3.set_ylabel(_("L∆∞u l∆∞·ª£ng n∆∞·ªõc (L/min)", "Water Flow (L/min)"))
        ax3.legend()
        plt.title(_("L·ªãch s·ª≠ l∆∞u l∆∞·ª£ng n∆∞·ªõc", "Water Flow History"))
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig2)

# -----------------------
# L·ªãch s·ª≠ t∆∞·ªõi
# -----------------------
st.header(_("üìÖ L·ªãch s·ª≠ t∆∞·ªõi n∆∞·ªõc", "üìÖ Irrigation History"))

history = load_json(HISTORY_FILE, [])
if history:
    df_hist = pd.DataFrame(history)
    if 'timestamp' in df_hist.columns:
        df_hist["timestamp"] = pd.to_datetime(df_hist["timestamp"], errors='coerce')
    df_hist = df_hist.sort_values(by="timestamp", ascending=False)
    st.dataframe(df_hist)
else:
    st.info(_("Ch∆∞a c√≥ l·ªãch s·ª≠ t∆∞·ªõi.", "No irrigation history."))

# -----------------------
# Footer
# -----------------------
st.markdown("---")
st.caption("üì° API th·ªùi ti·∫øt: Open-Meteo | D·ªØ li·ªáu c·∫£m bi·∫øn: ESP32-WROOM (MQTT)")
st.caption("Ng∆∞·ªùi th·ª±c hi·ªán: Ng√¥ Nguy·ªÖn ƒê·ªãnh T∆∞·ªùng-Mai Ph√∫c Khang")
