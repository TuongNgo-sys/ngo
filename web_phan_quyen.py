# web_esp.py
import streamlit as st
from datetime import datetime, timedelta, date
import random
from PIL import Image
import requests
import json
import os
from streamlit_autorefresh import st_autorefresh
import pytz
import pandas as pd

st.set_page_config(page_title="Smart Irrigation WebApp", layout="wide")
st_autorefresh(interval=3600 * 1000, key="refresh")

# --- LANGUAGE SELECT with session_state ---
if "lang" not in st.session_state:
    st.session_state.lang = "English"  # Default

lang = st.sidebar.selectbox(
    "üåê Language / Ng√¥n ng·ªØ",
    ["English", "Ti·∫øng Vi·ªát"],
    index=0 if st.session_state.lang == "English" else 1,
    key="lang"
)

en = st.session_state.lang == "English"

# --- TRANSLATION FUNCTION ---
def _(en_text, vi_text):
    return en_text if en else vi_text

DATA_FILE = "crop_data.json"

def load_crop_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    else:
        return {}

def save_crop_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

crop_data = load_crop_data()

# --- LOGO ---
try:
    st.markdown(
        """
        <style>
        .block-container {
            padding-top: 1rem;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    st.image(Image.open("logo1.png"), width=1200)
except:
    st.warning(_("‚ùå logo.png not found", "‚ùå Kh√¥ng t√¨m th·∫•y logo.png"))

st.markdown(
    f"<h2 style='text-align: center; font-size: 50px;'>üåæ { _('Smart Agricultural Irrigation System', 'H·ªá th·ªëng t∆∞·ªõi ti√™u n√¥ng nghi·ªáp th√¥ng minh') } üåæ</h2>",
    unsafe_allow_html=True
)

# Time zone Vietnam
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
now = datetime.now(vn_tz)
st.markdown(
    """
    <style>
    h3 {
        color: #000000 !important;
        font-size: 20px !important;
        font-family: Arial, sans-serif !important;
        font-weight: bold !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown(f"<h3>‚è∞ { _('Current time', 'Th·ªùi gian hi·ªán t·∫°i') }: {now.strftime('%d/%m/%Y')}</h3>", unsafe_allow_html=True)

# --- USER ROLE ---
st.sidebar.title(_("üîê Select User Role", "üîê Ch·ªçn vai tr√≤ ng∆∞·ªùi d√πng"))
user_type = st.sidebar.radio(_("You are:", "B·∫°n l√†:"), [_("Control Administrator", "Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn"), _("Monitoring Officer", "Ng∆∞·ªùi gi√°m s√°t")])

if user_type == _("Control Administrator", "Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn"):
    password = st.sidebar.text_input(_("üîë Enter password:", "üîë Nh·∫≠p m·∫≠t kh·∫©u:"), type="password")
    if password != "admin123":
        st.sidebar.error(_("‚ùå Incorrect password. Access denied.", "‚ùå M·∫≠t kh·∫©u sai. Truy c·∫≠p b·ªã t·ª´ ch·ªëi."))
        st.stop()
    else:
        st.sidebar.success(_("‚úÖ Authentication successful.", "‚úÖ X√°c th·ª±c th√†nh c√¥ng."))

# --- LOCATIONS ---
locations = {
    "TP. H·ªì Ch√≠ Minh": (10.762622, 106.660172),
    "H√† N·ªôi": (21.028511, 105.804817),
    "C·∫ßn Th∆°": (10.045161, 105.746857),
    "ƒê√† N·∫µng": (16.054407, 108.202167),
    "B√¨nh D∆∞∆°ng": (11.3254, 106.4770),
    "ƒê·ªìng Nai": (10.9453, 106.8133),
}
location_names = {
    "TP. H·ªì Ch√≠ Minh": _("Ho Chi Minh City", "TP. H·ªì Ch√≠ Minh"),
    "H√† N·ªôi": _("Hanoi", "H√† N·ªôi"),
    "C·∫ßn Th∆°": _("Can Tho", "C·∫ßn Th∆°"),
    "ƒê√† N·∫µng": _("Da Nang", "ƒê√† N·∫µng"),
    "B√¨nh D∆∞∆°ng": _("Binh Duong", "B√¨nh D∆∞∆°ng"),
    "ƒê·ªìng Nai": _("Dong Nai", "ƒê·ªìng Nai")
}
location_display_names = [location_names[k] for k in locations.keys()]
selected_city_display = st.selectbox(_("üìç Select location:", "üìç Ch·ªçn ƒë·ªãa ƒëi·ªÉm:"), location_display_names)
selected_city = next(k for k, v in location_names.items() if v == selected_city_display)
latitude, longitude = locations[selected_city]

# --- CROPS ---
crops = {
    "Ng√¥": (75, 100), 
    "Chu·ªëi": (270, 365),
    "·ªöt": (70, 90), 
}
required_soil_moisture = {
    "Ng√¥": 65,
    "Chu·ªëi": 70,
    "·ªöt": 65
}
crop_names = {
    "Ng√¥": _("Corn", "Ng√¥"),
    "Chu·ªëi": _("Banana", "Chu·ªëi"),
    "·ªöt": _("Chili pepper", "·ªöt")
}

if user_type == _("Control Administrator", "Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn"):
    crop_display_names = [crop_names[k] for k in crops.keys()]
    selected_crop_display = st.selectbox(_("üå± Select crop type:", "üå± Ch·ªçn lo·∫°i n√¥ng s·∫£n:"), crop_display_names)
    selected_crop = next(k for k, v in crop_names.items() if v == selected_crop_display)
    planting_date = st.date_input(_("üìÖ Planting date:", "üìÖ Ng√†y gieo tr·ªìng:"))
    if selected_crop in required_soil_moisture:
        st.markdown(f"üå± **{_('Required soil moisture for', 'ƒê·ªô ·∫©m ƒë·∫•t c·∫ßn thi·∫øt cho')} {selected_crop}**: **{required_soil_moisture[selected_crop]}%**")
    crop_data[selected_city] = {
        "crop": selected_crop,
        "planting_date": planting_date.isoformat()
    }
    save_crop_data(crop_data)
elif user_type == _("Monitoring Officer", "Ng∆∞·ªùi gi√°m s√°t"):
    if selected_city in crop_data:
        selected_crop = crop_data[selected_city]["crop"]
        planting_date = date.fromisoformat(crop_data[selected_city]["planting_date"])
        st.success(f"üìç { _('Currently growing', 'ƒêang tr·ªìng') }: **{crop_names[selected_crop]}** - **{location_names[selected_city]}** - { _('since', 't·ª´ ng√†y') } **{planting_date.strftime('%d/%m/%Y')}**")
        if selected_crop in required_soil_moisture:
            st.markdown(f"üå± **{_('Required soil moisture for', 'ƒê·ªô ·∫©m ƒë·∫•t c·∫ßn thi·∫øt cho')} {selected_crop}**: **{required_soil_moisture[selected_crop]}%**")
    else:
        st.warning(_("üìç No crop information available in this location.", "üìç Ch∆∞a c√≥ th√¥ng tin gieo tr·ªìng t·∫°i khu v·ª±c n√†y."))
        st.stop()

# --- HARVEST PREDICTION ---
if selected_city in crop_data:
    selected_crop = crop_data[selected_city]["crop"]
    planting_date = date.fromisoformat(crop_data[selected_city]["planting_date"])
    min_days, max_days = crops[selected_crop]
    est_min = planting_date + timedelta(days=min_days)
    est_max = planting_date + timedelta(days=max_days)
    st.info(f"üìÖ { _('Estimated harvest time for', 'Th·ªùi gian thu ho·∫°ch d·ª± ki·∫øn cho')} **{crop_names[selected_crop]}**: **{est_min.strftime('%d/%m/%Y')} - {est_max.strftime('%d/%m/%Y')}**")

# --- SENSOR DATA SIMULATION ---
st.subheader(_("üìä Real-time Sensor Data", "üìä D·ªØ li·ªáu c·∫£m bi·∫øn th·ªùi gian th·ª±c"))
soil_moisture = random.randint(40, 90)
temperature = random.uniform(25, 37)
humidity = random.uniform(50, 90)

col1, col2, col3 = st.columns(3)
col1.metric(_("üå± Soil Moisture (%)", "üå± ƒê·ªô ·∫©m ƒë·∫•t (%)"), f"{soil_moisture}%")
col2.metric(_("üå°Ô∏è Temperature (¬∞C)", "üå°Ô∏è Nhi·ªát ƒë·ªô (¬∞C)"), f"{temperature:.1f}¬∞C")
col3.metric(_("üíß Air Humidity (%)", "üíß ƒê·ªô ·∫©m kh√¥ng kh√≠ (%)"), f"{humidity:.1f}%")

# --- IRRIGATION CONTROL ---
if user_type == _("Control Administrator", "Ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn"):
    st.subheader(_("üíß Irrigation Control", "üíß ƒêi·ªÅu khi·ªÉn t∆∞·ªõi ti√™u"))
    if st.button(_("Start irrigation", "B·∫Øt ƒë·∫ßu t∆∞·ªõi")):
        st.success(_("‚úÖ Irrigation system started", "‚úÖ H·ªá th·ªëng t∆∞·ªõi ƒë√£ b·∫≠t"))
    if st.button(_("Stop irrigation", "D·ª´ng t∆∞·ªõi")):
        st.warning(_("‚õî Irrigation system stopped", "‚õî H·ªá th·ªëng t∆∞·ªõi ƒë√£ t·∫Øt"))

# --- WEATHER WARNING ---
if temperature > 35:
    st.error(_("üî• High temperature warning!", "üî• C·∫£nh b√°o nhi·ªát ƒë·ªô cao!"))
elif soil_moisture < required_soil_moisture.get(selected_crop, 60):
    st.warning(_("üíß Soil moisture is below the required level", "üíß ƒê·ªô ·∫©m ƒë·∫•t th·∫•p h∆°n m·ª©c y√™u c·∫ßu"))

# --- FOOTER ---
st.markdown("---")
st.caption("üì° API th·ªùi ti·∫øt: Open-Meteo | D·ªØ li·ªáu c·∫£m bi·∫øn: ESP32-WROOM")
st.caption(" Ng∆∞·ªùi th·ª±c hi·ªán: Ng√¥ Nguy·ªÖn ƒê·ªãnh T∆∞·ªùng-Mai Ph√∫c Khang")














